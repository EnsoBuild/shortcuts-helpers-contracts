{
  "address": "0x67d753CB8f48Ebd1E77c21E110aF870B4117DD7D",
  "abi": [
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "n",
          "type": "int256"
        }
      ],
      "name": "abs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "add",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "average",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "condition",
          "type": "bool"
        },
        {
          "internalType": "bytes4",
          "name": "method",
          "type": "bytes4"
        },
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "conditional",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "div",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "max",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "min",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "mul",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "sub",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ecb44a5518b867c93a28cf4dd28244c7798b63401f65f13cd1be95e336d6472",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x826e0BB2276271eFdF2a500597f37b94f6c153bA",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "387462",
    "logsBloom": "0x
    "blockHash": "0x628ef08979bd44c7136b034cddcdb0e6fd5e4bac3683ec294c8cc7ce4d33a91c",
    "transactionHash": "0x3ecb44a5518b867c93a28cf4dd28244c7798b63401f65f13cd1be95e336d6472",
    "logs": [],
    "blockNumber": 657746,
    "cumulativeGasUsed": "549950",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8fa6fdef6e27ad78e9b679076eb17617",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"n\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"average\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"},{\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"},{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"conditional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"div\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"max\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"mul\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"sub\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet Based on OpenZepplin Contracts 4.7.3: - utils/math/SignedMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedMath.sol) - utils/math/SignedSafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedSafeMath.sol)\",\"kind\":\"dev\",\"methods\":{\"abs(int256)\":{\"details\":\"Returns the absolute unsigned value of a signed value.\"},\"add(int256,int256)\":{\"details\":\"Returns the addition of two signed integers, reverting on overflow. Counterpart to Solidity's `+` operator. Requirements: - Addition cannot overflow.\"},\"average(int256,int256)\":{\"details\":\"Returns the average of two signed numbers without overflow. The result is rounded towards zero.\"},\"conditional(bool,bytes4,int256,int256)\":{\"details\":\"Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification.\"},\"div(int256,int256)\":{\"details\":\"Returns the integer division of two signed integers. Reverts on division by zero. The result is rounded towards zero. Counterpart to Solidity's `/` operator. Requirements: - The divisor cannot be zero.\"},\"max(int256,int256)\":{\"details\":\"Returns the largest of two signed numbers.\"},\"min(int256,int256)\":{\"details\":\"Returns the smallest of two signed numbers.\"},\"mul(int256,int256)\":{\"details\":\"Returns the multiplication of two signed integers, reverting on overflow. Counterpart to Solidity's `*` operator. Requirements: - Multiplication cannot overflow.\"},\"sub(int256,int256)\":{\"details\":\"Returns the subtraction of two signed integers, reverting on underflow. Counterpart to Solidity's `-` operator. Requirements: - Subtraction cannot overflow.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SignedMathHelpers.sol\":\"SignedMathHelpers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[]},\"sources\":{\"contracts/SignedMathHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @dev SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet\\n *\\n * Based on OpenZepplin Contracts 4.7.3:\\n * - utils/math/SignedMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedMath.sol)\\n * - utils/math/SignedSafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedSafeMath.sol)\\n */\\ncontract SignedMathHelpers {\\n    uint256 public constant VERSION = 1;\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) external pure returns (int256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * underflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) external pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) external pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) external pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) external pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) external pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) external pure returns (int256) {\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) external pure returns (uint256) {\\n        unchecked {\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification.\\n     */\\n    function conditional(bool condition, bytes4 method, int256 a, int256 b) external view returns (int256) {\\n        if (condition) {\\n            (bool success, bytes memory n) = address(this).staticcall(abi.encodeWithSelector(method, a, b));\\n            if (success) return abi.decode(n, (int256));\\n        }\\n        return a;\\n    }\\n}\\n\",\"keccak256\":\"0x86f5232087a9922da5eda40b6795da9139a1219eaffef04b237e8c3f0880f06b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610612806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806381fe578611610076578063adefc37b1161005b578063adefc37b1461015a578063bbe93d911461016d578063ffa1ad741461018057600080fd5b806381fe578614610134578063a5f3c23b1461014757600080fd5b806343509138116100a757806343509138146100fb5780637b05e75d1461010e5780637f0bb2921461012157600080fd5b80631b5ac4b5146100c357806329aa9cbe146100e8575b600080fd5b6100d66100d1366004610320565b610188565b60405190815260200160405180910390f35b6100d66100f6366004610339565b6101a3565b6100d6610109366004610339565b6101bb565b6100d661011c36600461035b565b6101c7565b6100d661012f366004610339565b6102c5565b6100d6610142366004610339565b6102ed565b6100d6610155366004610339565b6102fc565b6100d6610168366004610339565b610308565b6100d661017b366004610339565b610314565b6100d6600181565b60008082121561019b578160000361019d565b815b92915050565b60008183126101b257816101b4565b825b9392505050565b60006101b482846103fa565b600084156102ba576040805160248101859052604480820185905282518083039091018152606490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000881617905290516000918291309161024f91610489565b600060405180830381855afa9150503d806000811461028a576040519150601f19603f3d011682016040523d82523d6000602084013e61028f565b606091505b509150915081156102b757808060200190518101906102ae91906104b8565b925050506102bd565b50505b50815b949350505050565b6000806102d984841860011d8585166104d1565b90506102bd60ff82901c85851816826104d1565b60008183136101b257816101b4565b60006101b482846104d1565b60006101b482846104f9565b60006101b48284610520565b60006020828403121561033257600080fd5b5035919050565b6000806040838503121561034c57600080fd5b50508035926020909101359150565b6000806000806080858703121561037157600080fd5b8435801515811461038157600080fd5b935060208501357fffffffff00000000000000000000000000000000000000000000000000000000811681146103b657600080fd5b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082610430577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615610484576104846103cb565b500590565b6000825160005b818110156104aa5760208186018101518583015201610490565b506000920191825250919050565b6000602082840312156104ca57600080fd5b5051919050565b80820182811260008312801582168215821617156104f1576104f16103cb565b505092915050565b8181036000831280158383131683831282161715610519576105196103cb565b5092915050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615610561576105616103cb565b7f8000000000000000000000000000000000000000000000000000000000000000600087128682058812818416161561059c5761059c6103cb565b600087129250878205871284841616156105b8576105b86103cb565b878505871281841616156105ce576105ce6103cb565b50505092909302939250505056fea264697066735822122024ee43d730e898e994346ebce274dd1a16159e7348f43b89234e70477f1a00ae64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c806381fe578611610076578063adefc37b1161005b578063adefc37b1461015a578063bbe93d911461016d578063ffa1ad741461018057600080fd5b806381fe578614610134578063a5f3c23b1461014757600080fd5b806343509138116100a757806343509138146100fb5780637b05e75d1461010e5780637f0bb2921461012157600080fd5b80631b5ac4b5146100c357806329aa9cbe146100e8575b600080fd5b6100d66100d1366004610320565b610188565b60405190815260200160405180910390f35b6100d66100f6366004610339565b6101a3565b6100d6610109366004610339565b6101bb565b6100d661011c36600461035b565b6101c7565b6100d661012f366004610339565b6102c5565b6100d6610142366004610339565b6102ed565b6100d6610155366004610339565b6102fc565b6100d6610168366004610339565b610308565b6100d661017b366004610339565b610314565b6100d6600181565b60008082121561019b578160000361019d565b815b92915050565b60008183126101b257816101b4565b825b9392505050565b60006101b482846103fa565b600084156102ba576040805160248101859052604480820185905282518083039091018152606490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000881617905290516000918291309161024f91610489565b600060405180830381855afa9150503d806000811461028a576040519150601f19603f3d011682016040523d82523d6000602084013e61028f565b606091505b509150915081156102b757808060200190518101906102ae91906104b8565b925050506102bd565b50505b50815b949350505050565b6000806102d984841860011d8585166104d1565b90506102bd60ff82901c85851816826104d1565b60008183136101b257816101b4565b60006101b482846104d1565b60006101b482846104f9565b60006101b48284610520565b60006020828403121561033257600080fd5b5035919050565b6000806040838503121561034c57600080fd5b50508035926020909101359150565b6000806000806080858703121561037157600080fd5b8435801515811461038157600080fd5b935060208501357fffffffff00000000000000000000000000000000000000000000000000000000811681146103b657600080fd5b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082610430577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615610484576104846103cb565b500590565b6000825160005b818110156104aa5760208186018101518583015201610490565b506000920191825250919050565b6000602082840312156104ca57600080fd5b5051919050565b80820182811260008312801582168215821617156104f1576104f16103cb565b505092915050565b8181036000831280158383131683831282161715610519576105196103cb565b5092915050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615610561576105616103cb565b7f8000000000000000000000000000000000000000000000000000000000000000600087128682058812818416161561059c5761059c6103cb565b600087129250878205871284841616156105b8576105b86103cb565b878505871281841616156105ce576105ce6103cb565b50505092909302939250505056fea264697066735822122024ee43d730e898e994346ebce274dd1a16159e7348f43b89234e70477f1a00ae64736f6c63430008100033",
  "devdoc": {
    "details": "SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet Based on OpenZepplin Contracts 4.7.3: - utils/math/SignedMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedMath.sol) - utils/math/SignedSafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedSafeMath.sol)",
    "kind": "dev",
    "methods": {
      "abs(int256)": {
        "details": "Returns the absolute unsigned value of a signed value."
      },
      "add(int256,int256)": {
        "details": "Returns the addition of two signed integers, reverting on overflow. Counterpart to Solidity's `+` operator. Requirements: - Addition cannot overflow."
      },
      "average(int256,int256)": {
        "details": "Returns the average of two signed numbers without overflow. The result is rounded towards zero."
      },
      "conditional(bool,bytes4,int256,int256)": {
        "details": "Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification."
      },
      "div(int256,int256)": {
        "details": "Returns the integer division of two signed integers. Reverts on division by zero. The result is rounded towards zero. Counterpart to Solidity's `/` operator. Requirements: - The divisor cannot be zero."
      },
      "max(int256,int256)": {
        "details": "Returns the largest of two signed numbers."
      },
      "min(int256,int256)": {
        "details": "Returns the smallest of two signed numbers."
      },
      "mul(int256,int256)": {
        "details": "Returns the multiplication of two signed integers, reverting on overflow. Counterpart to Solidity's `*` operator. Requirements: - Multiplication cannot overflow."
      },
      "sub(int256,int256)": {
        "details": "Returns the subtraction of two signed integers, reverting on underflow. Counterpart to Solidity's `-` operator. Requirements: - Subtraction cannot overflow."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}