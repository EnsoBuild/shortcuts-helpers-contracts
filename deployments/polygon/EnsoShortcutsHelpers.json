{
  "address": "0x2b7f5C0ae63365eb033bbC2e67821d3a6650986f",
  "abi": [
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "input",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "input",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToUint256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "bytesToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "bytesToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "bytesToUint256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "balanceAddress",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "int256ToUint256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isAddressEqual",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "isEqual",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "isEqualOrGreaterThan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "isEqualOrLessThan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "isGreaterThan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "isLessThan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "condition",
          "type": "bool"
        }
      ],
      "name": "not",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "condition",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "toggle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "uint256ToInt256",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xccc2e318895429c542d1fae54125f630a0affd5f5cdff72aae25c6e392a154d8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf754916D90B109AE8E405FD34064cF6Df23947eb",
    "contractAddress": null,
    "transactionIndex": 49,
    "gasUsed": "504307",
    "logsBloom": "0x
    "blockHash": "0xa53751c8cf2bb594fac24356bbc487f58b353cbd44ed78b7611494f7064d0503",
    "transactionHash": "0xccc2e318895429c542d1fae54125f630a0affd5f5cdff72aae25c6e392a154d8",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 36544631,
        "transactionHash": "0xccc2e318895429c542d1fae54125f630a0affd5f5cdff72aae25c6e392a154d8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f754916d90b109ae8e405fd34064cf6df23947eb",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000035fb4afae5509e000000000000000000000000000000000000000000000005286b054219142153000000000000000000000000000000000000000000000375d7e351c11ccc3ce8000000000000000000000000000000000000000000000005283509f71e2ed0b5000000000000000000000000000000000000000000000375d8194d0c17b18d86",
        "logIndex": 224,
        "blockHash": "0xa53751c8cf2bb594fac24356bbc487f58b353cbd44ed78b7611494f7064d0503"
      }
    ],
    "blockNumber": 36544631,
    "cumulativeGasUsed": "9162550",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "d898feb8f7243bc577be94f833c69634",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"input\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"input\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"bytesToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"bytesToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"bytesToUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"balanceAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"int256ToUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isAddressEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"isEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"isEqualOrGreaterThan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"isEqualOrLessThan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"isGreaterThan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"isLessThan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"}],\"name\":\"not\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"toggle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"uint256ToInt256\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet. This contract functions allow to dynamically get the data during Shortcut transaction execution that usually would be read between transactions\",\"kind\":\"dev\",\"methods\":{\"bytes32ToAddress(bytes32)\":{\"details\":\"Returns `input` bytes32 as address.\"},\"bytes32ToUint256(bytes32)\":{\"details\":\"Returns `input` bytes32 as uint256.\"},\"bytesToBytes32(bytes)\":{\"details\":\"Returns `input` bytes as bytes32.\"},\"bytesToString(bytes)\":{\"details\":\"Returns `input` bytes as string.\"},\"bytesToUint256(bytes)\":{\"details\":\"Returns `input` bytes as uint256.\"},\"getBalance(address)\":{\"details\":\"Returns the ether balance of given `balanceAdderess`.\"},\"getBlockTimestamp()\":{\"details\":\"Returns the current block timestamp.\"},\"int256ToUint256(int256)\":{\"details\":\"Returns int256 `value` as uint256.\"},\"isAddressEqual(address,address)\":{\"details\":\"Returns bool for a == b\"},\"isEqual(uint256,uint256)\":{\"details\":\"Returns bool for a == b\"},\"isEqualOrGreaterThan(uint256,uint256)\":{\"details\":\"Returns bool for a >= b\"},\"isEqualOrLessThan(uint256,uint256)\":{\"details\":\"Returns bool for a <= b\"},\"isGreaterThan(uint256,uint256)\":{\"details\":\"Returns bool for a > b\"},\"isLessThan(uint256,uint256)\":{\"details\":\"Returns bool for a < b\"},\"not(bool)\":{\"details\":\"Returns the inverse bool\"},\"toggle(bool,uint256,uint256)\":{\"details\":\"Returns a value depending on a truth condition\"},\"uint256ToInt256(uint256)\":{\"details\":\"Returns uint256 `value` as int256.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/EnsoShortcutsHelpers.sol\":\"EnsoShortcutsHelpers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/helpers/EnsoShortcutsHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @dev SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet.\\n *\\n * This contract functions allow to dynamically get the data during Shortcut transaction execution\\n * that usually would be read between transactions\\n */\\ncontract EnsoShortcutsHelpers {\\n    uint256 public constant VERSION = 2;\\n\\n    /**\\n     * @dev Returns the ether balance of given `balanceAdderess`.\\n     */\\n    function getBalance(address balanceAddress) external view returns (uint256 balance) {\\n        return address(balanceAddress).balance;\\n    }\\n\\n    /**\\n     * @dev Returns the current block timestamp.\\n     */\\n    function getBlockTimestamp() external view returns (uint256 timestamp) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns a value depending on a truth condition\\n     */\\n    function toggle(bool condition, uint256 a, uint256 b) external pure returns (uint256) {\\n        if (condition) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the inverse bool\\n     */\\n    function not(bool condition) external pure returns (bool) {\\n        return !condition;\\n    }\\n\\n    /**\\n     * @dev Returns bool for a == b\\n     */\\n    function isEqual(uint256 a, uint256 b) external pure returns (bool) {\\n        return a == b;\\n    }\\n\\n    /**\\n     * @dev Returns bool for a < b\\n     */\\n    function isLessThan(uint256 a, uint256 b) external pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    /**\\n     * @dev Returns bool for a <= b\\n     */\\n    function isEqualOrLessThan(uint256 a, uint256 b) external pure returns (bool) {\\n        return a <= b;\\n    }\\n\\n    /**\\n     * @dev Returns bool for a > b\\n     */\\n    function isGreaterThan(uint256 a, uint256 b) external pure returns (bool) {\\n        return a > b;\\n    }\\n\\n    /**\\n     * @dev Returns bool for a >= b\\n     */\\n    function isEqualOrGreaterThan(uint256 a, uint256 b) external pure returns (bool) {\\n        return a >= b;\\n    }\\n\\n    /**\\n     * @dev Returns bool for a == b\\n     */\\n    function isAddressEqual(address a, address b) external pure returns (bool) {\\n        return a == b;\\n    }\\n\\n    /**\\n     * @dev Returns `input` bytes as string.\\n     */\\n    function bytesToString(bytes calldata input) external pure returns (string memory) {\\n        return string(abi.encodePacked(input));\\n    }\\n\\n    /**\\n     * @dev Returns `input` bytes as uint256.\\n     */\\n    function bytesToUint256(bytes calldata input) external pure returns (uint256) {\\n        require(input.length == 32, \\\"EnsoShortcutsHelpers: input length is not 32 bytes\\\");\\n        return uint256(bytes32(input));\\n    }\\n\\n    /**\\n     * @dev Returns `input` bytes as bytes32.\\n     */\\n    function bytesToBytes32(bytes calldata input) external pure returns (bytes32) {\\n        return bytes32(input);\\n    }\\n\\n    /**\\n     * @dev Returns `input` bytes32 as uint256.\\n     */\\n    function bytes32ToUint256(bytes32 input) external pure returns (uint256) {\\n        return uint256(input);\\n    }\\n\\n    /**\\n     * @dev Returns `input` bytes32 as address.\\n     */\\n    function bytes32ToAddress(bytes32 input) external pure returns (address) {\\n        return address(uint160(uint256(input)));\\n    }\\n\\n    /**\\n     * @dev Returns uint256 `value` as int256.\\n     */\\n    function uint256ToInt256(uint256 value) public pure returns (int256) {\\n        require(value <= uint256(type(int256).max), \\\"Value does not fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Returns int256 `value` as uint256.\\n     */\\n    function int256ToUint256(int256 value) public pure returns (uint256) {\\n        require(value >= 0, \\\"Value must be positive\\\");\\n        return uint256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xce552ba4b78d0308adbc07c2ff3acb1478c4b90cb3702ae1c46c523a4678d66a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610829908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918263294dc223146106345750816339614e4f146105545781633ced224a14610539578163503971021461051c5781635ced058e146104c95781636e7a43a3146104ac578163796b89b914610473578163b004cd0d146103af578163b0ad3a5f1461036b578163ba5f9e811461031f578163bfe370d914610303578163cc9de25d1461024e578163dcf6a59214610232578163ddcd5220146101f157508063e9970b6c146101d6578063f15839261461016a578063f8b2cb4f146101275763ffa1ad74146100eb57600080fd5b3461012357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610123576020905160028152f35b5080fd5b50346101235760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012357602090610162610784565b319051908152f35b503461012357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610123576101a1610784565b906024359073ffffffffffffffffffffffffffffffffffffffff908183168093036101d25760209450519216148152f35b8480fd5b5034610123576020906101e836610741565b90915191108152f35b9190503461022e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022e57602092505190358152f35b8280fd5b5050346101235760209061024536610741565b90915191118152f35b905082346103005750610260366106d4565b916020830361027d5760208461027685856107b8565b9051908152f35b60849060208551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152603260248201527f456e736f53686f72746375747348656c706572733a20696e707574206c656e6760448201527f7468206973206e6f7420333220627974657300000000000000000000000000006064820152fd5b80fd5b50503461012357602090610276610319366106d4565b906107b8565b5050346101235760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101235760209061027661035e610775565b60443590602435906107a7565b5050346101235760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610123576020906103a7610775565b159051908152f35b905082346103005760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261030057508035907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211610416575060209151908152f35b60649060208451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601f60248201527f56616c756520646f6573206e6f742066697420696e20616e20696e74323536006044820152fd5b50503461012357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101235760209051428152f35b505034610123576020906104bf36610741565b9091519110158152f35b905082346103005760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610300575073ffffffffffffffffffffffffffffffffffffffff602092519135168152f35b5050346101235760209061052f36610741565b9091519111158152f35b5050346101235760209061054c36610741565b915191148152f35b82843461030057603f90610567366106d4565b919084518381946020938484013781018383820152038084527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0948591011683019583871067ffffffffffffffff881117610608575085929391838652818452845191828186015281955b8387106105f05750508394508582601f949501015201168101030190f35b868101820151898801890152958101958895506105d2565b8260416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8385913461022e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022e578335928312610679576020838351908152f35b806020857f08c379a00000000000000000000000000000000000000000000000000000000060649452820152601660248201527f56616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83011261073c5760043567ffffffffffffffff9283821161073c578060238301121561073c57816004013593841161073c576024848301011161073c576024019190565b600080fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc604091011261073c576004359060243590565b60043590811515820361073c57565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361073c57565b909190156107b3575090565b905090565b3590602081106107c6575090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060200360031b1b169056fea264697066735822122054aec6227c1d2596b1e812f1935e5418a7998738d6d4b1e8b8c3b87b96e855cd64736f6c63430008100033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c918263294dc223146106345750816339614e4f146105545781633ced224a14610539578163503971021461051c5781635ced058e146104c95781636e7a43a3146104ac578163796b89b914610473578163b004cd0d146103af578163b0ad3a5f1461036b578163ba5f9e811461031f578163bfe370d914610303578163cc9de25d1461024e578163dcf6a59214610232578163ddcd5220146101f157508063e9970b6c146101d6578063f15839261461016a578063f8b2cb4f146101275763ffa1ad74146100eb57600080fd5b3461012357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610123576020905160028152f35b5080fd5b50346101235760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012357602090610162610784565b319051908152f35b503461012357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610123576101a1610784565b906024359073ffffffffffffffffffffffffffffffffffffffff908183168093036101d25760209450519216148152f35b8480fd5b5034610123576020906101e836610741565b90915191108152f35b9190503461022e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022e57602092505190358152f35b8280fd5b5050346101235760209061024536610741565b90915191118152f35b905082346103005750610260366106d4565b916020830361027d5760208461027685856107b8565b9051908152f35b60849060208551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152603260248201527f456e736f53686f72746375747348656c706572733a20696e707574206c656e6760448201527f7468206973206e6f7420333220627974657300000000000000000000000000006064820152fd5b80fd5b50503461012357602090610276610319366106d4565b906107b8565b5050346101235760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101235760209061027661035e610775565b60443590602435906107a7565b5050346101235760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610123576020906103a7610775565b159051908152f35b905082346103005760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261030057508035907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211610416575060209151908152f35b60649060208451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601f60248201527f56616c756520646f6573206e6f742066697420696e20616e20696e74323536006044820152fd5b50503461012357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101235760209051428152f35b505034610123576020906104bf36610741565b9091519110158152f35b905082346103005760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610300575073ffffffffffffffffffffffffffffffffffffffff602092519135168152f35b5050346101235760209061052f36610741565b9091519111158152f35b5050346101235760209061054c36610741565b915191148152f35b82843461030057603f90610567366106d4565b919084518381946020938484013781018383820152038084527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0948591011683019583871067ffffffffffffffff881117610608575085929391838652818452845191828186015281955b8387106105f05750508394508582601f949501015201168101030190f35b868101820151898801890152958101958895506105d2565b8260416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8385913461022e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261022e578335928312610679576020838351908152f35b806020857f08c379a00000000000000000000000000000000000000000000000000000000060649452820152601660248201527f56616c7565206d75737420626520706f736974697665000000000000000000006044820152fd5b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83011261073c5760043567ffffffffffffffff9283821161073c578060238301121561073c57816004013593841161073c576024848301011161073c576024019190565b600080fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc604091011261073c576004359060243590565b60043590811515820361073c57565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361073c57565b909190156107b3575090565b905090565b3590602081106107c6575090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060200360031b1b169056fea264697066735822122054aec6227c1d2596b1e812f1935e5418a7998738d6d4b1e8b8c3b87b96e855cd64736f6c63430008100033",
  "devdoc": {
    "details": "SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet. This contract functions allow to dynamically get the data during Shortcut transaction execution that usually would be read between transactions",
    "kind": "dev",
    "methods": {
      "bytes32ToAddress(bytes32)": {
        "details": "Returns `input` bytes32 as address."
      },
      "bytes32ToUint256(bytes32)": {
        "details": "Returns `input` bytes32 as uint256."
      },
      "bytesToBytes32(bytes)": {
        "details": "Returns `input` bytes as bytes32."
      },
      "bytesToString(bytes)": {
        "details": "Returns `input` bytes as string."
      },
      "bytesToUint256(bytes)": {
        "details": "Returns `input` bytes as uint256."
      },
      "getBalance(address)": {
        "details": "Returns the ether balance of given `balanceAdderess`."
      },
      "getBlockTimestamp()": {
        "details": "Returns the current block timestamp."
      },
      "int256ToUint256(int256)": {
        "details": "Returns int256 `value` as uint256."
      },
      "isAddressEqual(address,address)": {
        "details": "Returns bool for a == b"
      },
      "isEqual(uint256,uint256)": {
        "details": "Returns bool for a == b"
      },
      "isEqualOrGreaterThan(uint256,uint256)": {
        "details": "Returns bool for a >= b"
      },
      "isEqualOrLessThan(uint256,uint256)": {
        "details": "Returns bool for a <= b"
      },
      "isGreaterThan(uint256,uint256)": {
        "details": "Returns bool for a > b"
      },
      "isLessThan(uint256,uint256)": {
        "details": "Returns bool for a < b"
      },
      "not(bool)": {
        "details": "Returns the inverse bool"
      },
      "toggle(bool,uint256,uint256)": {
        "details": "Returns a value depending on a truth condition"
      },
      "uint256ToInt256(uint256)": {
        "details": "Returns uint256 `value` as int256."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}