{
  "address": "0x5012E9A673f11aF27b1d353EeFd4542e7ac6d553",
  "abi": [
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "n",
          "type": "int256"
        }
      ],
      "name": "abs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "add",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "average",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "condition",
          "type": "bool"
        },
        {
          "internalType": "bytes4",
          "name": "method",
          "type": "bytes4"
        },
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "conditional",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "div",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "max",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "min",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "mul",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        }
      ],
      "name": "sub",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x128f68467b5782cbbe6f2e598773609fbaa71aa3eb5623f7e3b2b29c6f4b9daa",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf754916D90B109AE8E405FD34064cF6Df23947eb",
    "contractAddress": null,
    "transactionIndex": 42,
    "gasUsed": "409009",
    "logsBloom": "0x
    "blockHash": "0xb69f2b8238a9bad089957faf20ce6869ba3436b528a6ae4c861b0941353957de",
    "transactionHash": "0x128f68467b5782cbbe6f2e598773609fbaa71aa3eb5623f7e3b2b29c6f4b9daa",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 36544634,
        "transactionHash": "0x128f68467b5782cbbe6f2e598773609fbaa71aa3eb5623f7e3b2b29c6f4b9daa",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f754916d90b109ae8e405fd34064cf6df23947eb",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002c2fe3bebf3e96000000000000000000000000000000000000000000000005280442bf75002fb2000000000000000000000000000000000000000000000375f2366c69108b651800000000000000000000000000000000000000000000000527d812dbb640f11c000000000000000000000000000000000000000000000375f2629c4ccf4aa3ae",
        "logIndex": 203,
        "blockHash": "0xb69f2b8238a9bad089957faf20ce6869ba3436b528a6ae4c861b0941353957de"
      }
    ],
    "blockNumber": 36544634,
    "cumulativeGasUsed": "8859590",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "d898feb8f7243bc577be94f833c69634",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"n\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"average\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"},{\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"},{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"conditional\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"div\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"max\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"mul\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"sub\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet Based on OpenZepplin Contracts 4.7.3: - utils/math/SignedMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedMath.sol) - utils/math/SignedSafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedSafeMath.sol)\",\"kind\":\"dev\",\"methods\":{\"abs(int256)\":{\"details\":\"Returns the absolute unsigned value of a signed value.\"},\"add(int256,int256)\":{\"details\":\"Returns the addition of two signed integers, reverting on overflow. Counterpart to Solidity's `+` operator. Requirements: - Addition cannot overflow.\"},\"average(int256,int256)\":{\"details\":\"Returns the average of two signed numbers without overflow. The result is rounded towards zero.\"},\"conditional(bool,bytes4,int256,int256)\":{\"details\":\"Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification.\"},\"div(int256,int256)\":{\"details\":\"Returns the integer division of two signed integers. Reverts on division by zero. The result is rounded towards zero. Counterpart to Solidity's `/` operator. Requirements: - The divisor cannot be zero.\"},\"max(int256,int256)\":{\"details\":\"Returns the largest of two signed numbers.\"},\"min(int256,int256)\":{\"details\":\"Returns the smallest of two signed numbers.\"},\"mul(int256,int256)\":{\"details\":\"Returns the multiplication of two signed integers, reverting on overflow. Counterpart to Solidity's `*` operator. Requirements: - Multiplication cannot overflow.\"},\"sub(int256,int256)\":{\"details\":\"Returns the subtraction of two signed integers, reverting on underflow. Counterpart to Solidity's `-` operator. Requirements: - Subtraction cannot overflow.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/SignedMathHelpers.sol\":\"SignedMathHelpers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/helpers/SignedMathHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @dev SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet\\n *\\n * Based on OpenZepplin Contracts 4.7.3:\\n * - utils/math/SignedMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedMath.sol)\\n * - utils/math/SignedSafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedSafeMath.sol)\\n */\\ncontract SignedMathHelpers {\\n    uint256 public constant VERSION = 1;\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) external pure returns (int256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * underflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) external pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) external pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) external pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) external pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) external pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) external pure returns (int256) {\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) external pure returns (uint256) {\\n        unchecked {\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification.\\n     */\\n    function conditional(bool condition, bytes4 method, int256 a, int256 b) external view returns (int256) {\\n        if (condition) {\\n            (bool success, bytes memory n) = address(this).staticcall(abi.encodeWithSelector(method, a, b));\\n            if (success) return abi.decode(n, (int256));\\n        }\\n        return a;\\n    }\\n}\\n\",\"keccak256\":\"0x86f5232087a9922da5eda40b6795da9139a1219eaffef04b237e8c3f0880f06b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761067d908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182631b5ac4b5146104225750816329aa9cbe146103fc57816343509138146103605781637b05e75d146102dc5781637f0bb292146102a657816381fe578614610277578163a5f3c23b14610254578163adefc37b146101f6578163bbe93d91146100cf575063ffa1ad741461009357600080fd5b346100cb57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100cb576020905160018152f35b5080fd5b8383346100cb576100df3661046a565b919092808313818513907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85810487118284161661019e57838612917f8000000000000000000000000000000000000000000000000000000000000000938389860589129116166101ca5786858912940588129084161661019e5785900586129116166101725750602093505191028152f35b806011867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b60248460118a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248560118b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8383346100cb576102063661046a565b9290818482039412818512811691851390151617610228576020838351908152f35b806011857f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b5050346100cb5760209061027061026a3661046a565b906104a3565b9051908152f35b5050346100cb5760209161028a3661046a565b9091508082131561029e5750905b51908152f35b905090610298565b5050346100cb576020906102706102d06102bf3661046a565b9190828118928360011d91166104a3565b908160ff1c16906104a3565b90503461035c5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261035c5735801515810361035c57602435927fffffffff000000000000000000000000000000000000000000000000000000008416840361035957506020926102709160643591604435916104ee565b80fd5b8280fd5b8383346100cb576103703661046a565b91909282156103d0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f80000000000000000000000000000000000000000000000000000000000000008514166101725750602093505191058152f35b806012867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b5050346100cb5760209161040f3661046a565b9091508082121561029e57509051908152f35b84913461035c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261035c5760209290359080821261046557508152f35b038152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc604091011261049e576004359060243590565b600080fd5b919091600083820193841291129080158216911516176104bf57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291926104fa57505090565b6040519160208301918252836024840152604483015260448252608082019167ffffffffffffffff9281811084821117610618576040526000809281925190305afa3d1561060f573d8381116105e257604051937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f81601f8501160116850190858210908211176105b55760405283523d82602085013e5b61059d57505090565b90915060208280518101031261035957506020015190565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b60609250610594565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220d4a99dd89c3b0fa9359465196697f31cdaaa8d2d56b356e199d6762e0d305abd64736f6c63430008100033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c9182631b5ac4b5146104225750816329aa9cbe146103fc57816343509138146103605781637b05e75d146102dc5781637f0bb292146102a657816381fe578614610277578163a5f3c23b14610254578163adefc37b146101f6578163bbe93d91146100cf575063ffa1ad741461009357600080fd5b346100cb57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100cb576020905160018152f35b5080fd5b8383346100cb576100df3661046a565b919092808313818513907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85810487118284161661019e57838612917f8000000000000000000000000000000000000000000000000000000000000000938389860589129116166101ca5786858912940588129084161661019e5785900586129116166101725750602093505191028152f35b806011867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b60248460118a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248560118b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8383346100cb576102063661046a565b9290818482039412818512811691851390151617610228576020838351908152f35b806011857f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b5050346100cb5760209061027061026a3661046a565b906104a3565b9051908152f35b5050346100cb5760209161028a3661046a565b9091508082131561029e5750905b51908152f35b905090610298565b5050346100cb576020906102706102d06102bf3661046a565b9190828118928360011d91166104a3565b908160ff1c16906104a3565b90503461035c5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261035c5735801515810361035c57602435927fffffffff000000000000000000000000000000000000000000000000000000008416840361035957506020926102709160643591604435916104ee565b80fd5b8280fd5b8383346100cb576103703661046a565b91909282156103d0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f80000000000000000000000000000000000000000000000000000000000000008514166101725750602093505191058152f35b806012867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b5050346100cb5760209161040f3661046a565b9091508082121561029e57509051908152f35b84913461035c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261035c5760209290359080821261046557508152f35b038152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc604091011261049e576004359060243590565b600080fd5b919091600083820193841291129080158216911516176104bf57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291926104fa57505090565b6040519160208301918252836024840152604483015260448252608082019167ffffffffffffffff9281811084821117610618576040526000809281925190305afa3d1561060f573d8381116105e257604051937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f81601f8501160116850190858210908211176105b55760405283523d82602085013e5b61059d57505090565b90915060208280518101031261035957506020015190565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b60609250610594565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220d4a99dd89c3b0fa9359465196697f31cdaaa8d2d56b356e199d6762e0d305abd64736f6c63430008100033",
  "devdoc": {
    "details": "SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet Based on OpenZepplin Contracts 4.7.3: - utils/math/SignedMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedMath.sol) - utils/math/SignedSafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedSafeMath.sol)",
    "kind": "dev",
    "methods": {
      "abs(int256)": {
        "details": "Returns the absolute unsigned value of a signed value."
      },
      "add(int256,int256)": {
        "details": "Returns the addition of two signed integers, reverting on overflow. Counterpart to Solidity's `+` operator. Requirements: - Addition cannot overflow."
      },
      "average(int256,int256)": {
        "details": "Returns the average of two signed numbers without overflow. The result is rounded towards zero."
      },
      "conditional(bool,bytes4,int256,int256)": {
        "details": "Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification."
      },
      "div(int256,int256)": {
        "details": "Returns the integer division of two signed integers. Reverts on division by zero. The result is rounded towards zero. Counterpart to Solidity's `/` operator. Requirements: - The divisor cannot be zero."
      },
      "max(int256,int256)": {
        "details": "Returns the largest of two signed numbers."
      },
      "min(int256,int256)": {
        "details": "Returns the smallest of two signed numbers."
      },
      "mul(int256,int256)": {
        "details": "Returns the multiplication of two signed integers, reverting on overflow. Counterpart to Solidity's `*` operator. Requirements: - Multiplication cannot overflow."
      },
      "sub(int256,int256)": {
        "details": "Returns the subtraction of two signed integers, reverting on underflow. Counterpart to Solidity's `-` operator. Requirements: - Subtraction cannot overflow."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}