{
  "language": "Solidity",
  "sources": {
    "contracts/EnsoWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport {VM} from \"@ensofinance/weiroll/contracts/VM.sol\";\n\ncontract EnsoWallet is VM {\n    address public caller;\n    bool public initialized;\n\n    // Already initialized\n    error AlreadyInit();\n    // Not caller\n    error NotCaller();\n    // Invalid address\n    error InvalidAddress();\n\n    function initialize(\n        address caller_,\n        bytes32[] calldata commands,\n        bytes[] calldata state\n    ) external payable {\n        if (initialized) revert AlreadyInit();\n        caller = caller_;\n        if (commands.length != 0) {\n            _execute(commands, state);\n        }\n    }\n\n    function execute(bytes32[] calldata commands, bytes[] calldata state)\n        external\n        payable\n        returns (bytes[] memory returnData)\n    {\n        if (msg.sender != caller) revert NotCaller();\n        returnData = _execute(commands, state);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "@ensofinance/weiroll/contracts/VM.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"./CommandBuilder.sol\";\n\nabstract contract VM {\n    using CommandBuilder for bytes[];\n\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00;\n    uint256 constant FLAG_CT_CALL = 0x01;\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\n    uint256 constant FLAG_CT_MASK = 0x03;\n    uint256 constant FLAG_DATA = 0x20;\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x40;\n    uint256 constant FLAG_TUPLE_RETURN = 0x80;\n\n    uint256 constant SHORT_COMMAND_FILL =\n        0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    error ExecutionFailed(\n        uint256 command_index,\n        address target,\n        string message\n    );\n\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\n        internal\n        returns (bytes[] memory)\n    {\n        bytes32 command;\n        uint256 flags;\n        bytes32 indices;\n\n        bool success;\n        bytes memory outData;\n\n        uint256 commandsLength = commands.length;\n        for (uint256 i; i < commandsLength; i = _uncheckedIncrement(i)) {\n            command = commands[i];\n            flags = uint256(uint8(bytes1(command << 32)));\n\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\n                i = _uncheckedIncrement(i);\n                indices = commands[i];\n            } else {\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\n            }\n\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\n                (success, outData) = address(uint160(uint256(command))) // target\n                    .delegatecall(\n                        // inputs\n                        flags & FLAG_DATA == 0\n                            ? state.buildInputs(\n                                bytes4(command), // selector\n                                indices\n                            )\n                            : state[\n                                uint8(bytes1(indices)) &\n                                CommandBuilder.IDX_VALUE_MASK\n                            ]\n                    );\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\n                (success, outData) = address(uint160(uint256(command))).call( // target\n                    // inputs\n                    flags & FLAG_DATA == 0\n                        ? state.buildInputs(\n                            bytes4(command), // selector\n                            indices\n                        )\n                        : state[\n                            uint8(bytes1(indices)) &\n                            CommandBuilder.IDX_VALUE_MASK\n                        ]\n                );\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\n                (success, outData) = address(uint160(uint256(command))) // target\n                    .staticcall(\n                        // inputs\n                        flags & FLAG_DATA == 0\n                            ? state.buildInputs(\n                                bytes4(command), // selector\n                                indices\n                            )\n                            : state[\n                                uint8(bytes1(indices)) &\n                                CommandBuilder.IDX_VALUE_MASK\n                            ]\n                    );\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\n                uint256 callEth;\n                bytes memory v = state[uint8(bytes1(indices))];\n                assembly {\n                    callEth := mload(add(v, 0x20))\n                }\n                (success, outData) = address(uint160(uint256(command))).call{ // target\n                    value: callEth\n                }(\n                    // inputs\n                    flags & FLAG_DATA == 0\n                        ? state.buildInputs(\n                            bytes4(command), // selector\n                            indices << 8 // skip value input\n                        )\n                        : state[\n                            uint8(\n                                bytes1(indices << 8) // first byte after value input\n                            ) & CommandBuilder.IDX_VALUE_MASK\n                        ]\n                );\n            } else {\n                revert(\"Invalid calltype\");\n            }\n\n            if (!success) {\n                if (outData.length > 0) {\n                    assembly {\n                        outData := add(outData, 68)\n                    }\n                }\n                revert ExecutionFailed({\n                    command_index: flags & FLAG_EXTENDED_COMMAND == 0\n                        ? i\n                        : i - 1,\n                    target: address(uint160(uint256(command))),\n                    message: outData.length > 0 ? string(outData) : \"Unknown\"\n                });\n            }\n\n            if (flags & FLAG_TUPLE_RETURN != 0) {\n                state.writeTuple(bytes1(command << 88), outData);\n            } else {\n                state = state.writeOutputs(bytes1(command << 88), outData);\n            }\n        }\n        return state;\n    }\n\n    function _uncheckedIncrement(uint256 i) private pure returns (uint256) {\n        unchecked {\n            ++i;\n        }\n        return i;\n    }\n}\n"
    },
    "@ensofinance/weiroll/contracts/CommandBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary CommandBuilder {\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\n    uint256 constant IDX_VALUE_MASK = 0x7f;\n    uint256 constant IDX_END_OF_ARGS = 0xff;\n    uint256 constant IDX_USE_STATE = 0xfe;\n    uint256 constant IDX_DYNAMIC_START = 0xfd;\n    uint256 constant IDX_DYNAMIC_END = 0xfc;\n\n    function buildInputs(\n        bytes[] memory state,\n        bytes4 selector,\n        bytes32 indices\n    ) internal view returns (bytes memory ret) {\n        uint256 idx; // The current command index\n        uint256 offsetIdx; // The index of the current offset\n\n        uint256 count; // Number of bytes in whole ABI encoded message\n        uint256 free; // Pointer to first free byte in tail part of message\n        uint256 offset; // Pointer to the first free byte for variable length data inside dynamic types\n\n        uint256[] memory offsets = new uint256[](10); // Optionally store the length of all dynamic types (a command cannot fit more than 10 dynamic types)\n        bytes memory stateData; // Optionally encode the current state if the call requires it\n\n        uint256 indicesLength; // Number of indices\n\n        // Determine the length of the encoded data\n        for (uint256 i; i < 32; ) {\n            idx = uint8(indices[i]);\n            if (idx == IDX_END_OF_ARGS) {\n                indicesLength = i;\n                break;\n            }\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\n                if (idx == IDX_USE_STATE) {\n                    if (stateData.length == 0) {\n                        stateData = abi.encode(state);\n                    }\n                    unchecked {\n                        free += 32;\n                        count += stateData.length;\n                    }\n                } else if (idx == IDX_DYNAMIC_START) {\n                    offset = 1; // Semantically overloading the offset to work as a boolean\n                } else if (idx == IDX_DYNAMIC_END) {\n                    unchecked {\n                        offsets[offsetIdx] = offset - 1; // Remove 1 that was set at the start of the dynamic type, to get correct offset length\n                    }\n                    offset = 0;\n                    // Increase count and free for dynamic type pointer\n                    unchecked {\n                        offsetIdx++;\n                        free += 32;\n                        count += 32;\n                    }\n                } else {\n                    // Add the size of the value, rounded up to the next word boundary, plus space for pointer and length\n                    uint256 argLen = state[idx & IDX_VALUE_MASK].length;\n                    require(\n                        argLen % 32 == 0,\n                        \"Dynamic state variables must be a multiple of 32 bytes\"\n                    );\n                    unchecked {\n                        count += argLen + 32;\n                    }\n                    if (offset != 0) {\n                        // Increase offset size\n                        unchecked {\n                            offset += 32;\n                        }\n                    } else {\n                        // Progress next free slot\n                        unchecked {\n                            free += 32;\n                        }\n                    }\n                }\n            } else {\n                require(\n                    state[idx & IDX_VALUE_MASK].length == 32,\n                    \"Static state variables must be 32 bytes\"\n                );\n                unchecked {\n                    count += 32;\n                }\n                if (offset != 0) {\n                    unchecked {\n                        offset += 32;\n                    }\n                } else {\n                    unchecked {\n                        free += 32;\n                    }\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Encode it\n        ret = new bytes(count + 4);\n        assembly {\n            mstore(add(ret, 32), selector)\n        }\n        count = 0;\n        offsetIdx = 0;\n        for (uint256 i; i < indicesLength; ) {\n            idx = uint8(indices[i]);\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\n                if (idx == IDX_USE_STATE) {\n                    assembly {\n                        mstore(add(add(ret, 36), count), free)\n                    }\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\n                    unchecked {\n                        free += stateData.length - 32;\n                        count += 32;\n                    }\n                } else if (idx == IDX_DYNAMIC_START) {\n                    // Start of dynamic type, put pointer in current slot\n                    assembly {\n                        mstore(add(add(ret, 36), count), free)\n                    }\n                    unchecked {\n                        offset = free + offsets[offsetIdx];\n                        count += 32;\n                    }\n                } else if (idx == IDX_DYNAMIC_END) {\n                    offset = 0;\n                    unchecked {\n                        offsetIdx++;\n                    }\n                } else {\n                    // Variable length data\n                    uint256 argLen = state[idx & IDX_VALUE_MASK].length;\n\n                    if (offset != 0) {\n                        // Part of dynamic type; put a pointer in the first free slot and write the data to the offset free slot\n                        uint256 pointer = offsets[offsetIdx];\n                        assembly {\n                            mstore(add(add(ret, 36), free), pointer)\n                        }\n                        unchecked {\n                            free += 32;\n                        }\n                        memcpy(\n                            state[idx & IDX_VALUE_MASK],\n                            0,\n                            ret,\n                            offset + 4,\n                            argLen\n                        );\n                        unchecked {\n                            offsets[offsetIdx] += argLen;\n                            offset += argLen;\n                        }\n                    } else {\n                        // Put a pointer in the current slot and write the data to first free slot\n                        assembly {\n                            mstore(add(add(ret, 36), count), free)\n                        }\n                        memcpy(\n                            state[idx & IDX_VALUE_MASK],\n                            0,\n                            ret,\n                            free + 4,\n                            argLen\n                        );\n                        unchecked {\n                            free += argLen;\n                            count += 32;\n                        }\n                    }\n                }\n            } else {\n                // Fixed length data\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\n                if (offset != 0) {\n                    // Part of dynamic type; write to first free slot\n                    assembly {\n                        mstore(add(add(ret, 36), free), mload(add(stateVar, 32)))\n                    }\n                    unchecked {\n                        free += 32;\n                    }\n                } else {\n                    // Write the data to current slot\n                    assembly {\n                        mstore(add(add(ret, 36), count), mload(add(stateVar, 32)))\n                    }\n                    unchecked {\n                        count += 32;\n                    }\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function writeOutputs(\n        bytes[] memory state,\n        bytes1 index,\n        bytes memory output\n    ) internal pure returns (bytes[] memory) {\n        uint256 idx = uint8(index);\n        if (idx == IDX_END_OF_ARGS) return state;\n\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\n            if (idx == IDX_USE_STATE) {\n                state = abi.decode(output, (bytes[]));\n            } else {\n                // Check the first field is 0x20 (because we have only a single return value)\n                uint256 argPtr;\n                assembly {\n                    argPtr := mload(add(output, 32))\n                }\n                require(\n                    argPtr == 32,\n                    \"Only one return value permitted (variable)\"\n                );\n\n                assembly {\n                    // Overwrite the first word of the return data with the length - 32\n                    mstore(add(output, 32), sub(mload(output), 32))\n                    // Insert a pointer to the return data, starting at the second word, into state\n                    mstore(\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\n                        add(output, 32)\n                    )\n                }\n            }\n        } else {\n            // Single word\n            require(\n                output.length == 32,\n                \"Only one return value permitted (static)\"\n            );\n\n            state[idx & IDX_VALUE_MASK] = output;\n        }\n\n        return state;\n    }\n\n    function writeTuple(\n        bytes[] memory state,\n        bytes1 index,\n        bytes memory output\n    ) internal view {\n        uint256 idx = uint256(uint8(index));\n        if (idx == IDX_END_OF_ARGS) return;\n\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\n        memcpy(output, 0, entry, 32, output.length);\n        assembly {\n            let l := mload(output)\n            mstore(add(entry, 32), l)\n        }\n    }\n\n    function memcpy(\n        bytes memory src,\n        uint256 srcIdx,\n        bytes memory dest,\n        uint256 destIdx,\n        uint256 len\n    ) internal view {\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    4,\n                    add(add(src, 32), srcIdx),\n                    len,\n                    add(add(dest, 32), destIdx),\n                    len\n                )\n            )\n        }\n    }\n}\n"
    },
    "contracts/EnsoWalletFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"./EnsoWallet.sol\";\nimport {Clones} from \"./Libraries/Clones.sol\";\n\ncontract EnsoWalletFactory {\n    using Clones for address;\n\n    address public immutable ensoWallet;\n\n    event Deployed(EnsoWallet instance);\n\n    constructor(address EnsoWallet_) {\n        ensoWallet = EnsoWallet_;\n    }\n\n    function deploy(bytes32[] calldata commands, bytes[] calldata state) public payable returns (EnsoWallet instance) {\n        instance = EnsoWallet(payable(ensoWallet.cloneDeterministic(msg.sender)));\n        instance.initialize{value: msg.value}(msg.sender, commands, state);\n\n        emit Deployed(instance);\n    }\n\n    function getAddress() public view returns (address payable) {\n        return payable(ensoWallet.predictDeterministicAddress(msg.sender, address(this)));\n    }\n}\n"
    },
    "contracts/Libraries/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n// Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Clones.sol\n\npragma solidity ^0.8.16;\n\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, address salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        address salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n}\n"
    },
    "contracts/helpers/EnsoShortcutsHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n/**\n * @dev SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet.\n *\n * This contract functions allow to dynamically get the data during Shortcut transaction execution\n * that usually would be read between transactions\n */\ncontract EnsoShortcutsHelpers {\n    uint256 public constant VERSION = 2;\n\n    /**\n     * @dev Returns the ether balance of given `balanceAdderess`.\n     */\n    function getBalance(address balanceAddress) external view returns (uint256 balance) {\n        return address(balanceAddress).balance;\n    }\n\n    /**\n     * @dev Returns the current block timestamp.\n     */\n    function getBlockTimestamp() external view returns (uint256 timestamp) {\n        return block.timestamp;\n    }\n\n    /**\n     * @dev Returns a value depending on a truth condition\n     */\n    function toggle(bool condition, uint256 a, uint256 b) external pure returns (uint256) {\n        if (condition) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n\n    /**\n     * @dev Returns the inverse bool\n     */\n    function not(bool condition) external pure returns (bool) {\n        return !condition;\n    }\n\n    /**\n     * @dev Returns bool for a == b\n     */\n    function isEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return a == b;\n    }\n\n    /**\n     * @dev Returns bool for a < b\n     */\n    function isLessThan(uint256 a, uint256 b) external pure returns (bool) {\n        return a < b;\n    }\n\n    /**\n     * @dev Returns bool for a <= b\n     */\n    function isEqualOrLessThan(uint256 a, uint256 b) external pure returns (bool) {\n        return a <= b;\n    }\n\n    /**\n     * @dev Returns bool for a > b\n     */\n    function isGreaterThan(uint256 a, uint256 b) external pure returns (bool) {\n        return a > b;\n    }\n\n    /**\n     * @dev Returns bool for a >= b\n     */\n    function isEqualOrGreaterThan(uint256 a, uint256 b) external pure returns (bool) {\n        return a >= b;\n    }\n\n    /**\n     * @dev Returns bool for a == b\n     */\n    function isAddressEqual(address a, address b) external pure returns (bool) {\n        return a == b;\n    }\n\n    /**\n     * @dev Returns `input` bytes as string.\n     */\n    function bytesToString(bytes calldata input) external pure returns (string memory) {\n        return string(abi.encodePacked(input));\n    }\n\n    /**\n     * @dev Returns `input` bytes32 as uint256.\n     */\n    function bytes32ToUint256(bytes32 input) external pure returns (uint256) {\n        return uint256(input);\n    }\n\n    /**\n     * @dev Returns `input` bytes32 as address.\n     */\n    function bytes32ToAddress(bytes32 input) external pure returns (address) {\n        return address(uint160(uint256(input)));\n    }\n\n    /**\n     * @dev Returns uint256 `value` as int256.\n     */\n    function uint256ToInt256(uint256 value) public pure returns (int256) {\n        require(value <= uint256(type(int256).max), \"Value does not fit in an int256\");\n        return int256(value);\n    }\n\n    /**\n     * @dev Returns int256 `value` as uint256.\n     */\n    function int256ToUint256(int256 value) public pure returns (uint256) {\n        require(value >= 0, \"Value must be positive\");\n        return uint256(value);\n    }\n}\n"
    },
    "contracts/helpers/MathHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n/**\n * @dev MathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet\n *\n * Based on OpenZepplin Contracts v4.7.3:\n * - utils/math/Math.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol)\n * - utils/math/SafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol)\n */\ncontract MathHelpers {\n    uint256 public constant VERSION = 1;\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) external pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) external pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) external pure returns (uint256) {\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) external pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) external pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) external pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) external pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) external pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification.\n     */\n    function conditional(bool condition, bytes4 method, uint256 a, uint256 b) external view returns (uint256) {\n        if (condition) {\n            (bool success, bytes memory n) = address(this).staticcall(abi.encodeWithSelector(method, a, b));\n            if (success) return abi.decode(n, (uint256));\n        }\n        return a;\n    }\n}\n"
    },
    "contracts/helpers/SignedMathHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n/**\n * @dev SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet\n *\n * Based on OpenZepplin Contracts 4.7.3:\n * - utils/math/SignedMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedMath.sol)\n * - utils/math/SignedSafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedSafeMath.sol)\n */\ncontract SignedMathHelpers {\n    uint256 public constant VERSION = 1;\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) external pure returns (int256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * underflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) external pure returns (int256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) external pure returns (int256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) external pure returns (int256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) external pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) external pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) external pure returns (int256) {\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) external pure returns (uint256) {\n        unchecked {\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n\n    /**\n     * @dev Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification.\n     */\n    function conditional(bool condition, bytes4 method, int256 a, int256 b) external view returns (int256) {\n        if (condition) {\n          (bool success, bytes memory n) = address(this).staticcall(abi.encodeWithSelector(method, a, b));\n          if (success) return abi.decode(n, (int256));\n        }\n        return a;\n    }\n}\n"
    },
    "contracts/helpers/TupleHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n/**\n  * @notice Helper contract to extract a variety of types from a tuple within the context of a weiroll script\n  */\ncontract TupleHelpers {\n\n    /**\n      * @notice Extract a bytes32 encoded static type from a tuple\n      * @dev Use with .rawValue() in the weiroll planner\n      * @param tuple The bytes encoded tuple\n      * @param index The index of the value to be extracted\n      */\n    function extractElement(bytes memory tuple, uint256 index) public pure returns (bytes32) {\n        assembly {\n            // let offset := mul(add(index, 1), 32)\n            // return(add(tuple, offset), 32)\n            return(add(tuple, mul(add(index, 1), 32)), 32)\n        }\n    }\n\n    /**\n      * @notice Extract a bytes encoded dynamic type from a tuple\n      * @dev Use with .rawValue() in the weiroll planner\n      * @param tuple The bytes encoded tuple\n      * @param index The index of the string or bytes to be extracted\n      */\n    function extractDynamicElement(bytes memory tuple, uint256 index) public pure returns (bytes32) {\n        assembly {\n            let offset := add(mload(add(tuple, mul(add(index, 1), 32))), 32)\n            let length := mload(add(tuple, offset))\n            if gt(mod(length, 32), 0) {\n              length := mul(add(div(length, 32), 1), 32)\n            }\n            return(add(tuple, add(offset, 32)), length)\n        }\n    }\n\n    /**\n      * @notice Extract a bytes encoded tuple from another tuple\n      * @dev Use with .rawValue() in the weiroll planner\n      * @param tuple The bytes encoded parent tuple\n      * @param index The index of the tuple to be extracted\n      * @param isDynamicTypeFormat Boolean to define whether the child tuple is dynamically sized. If the child tuple contains bytes or string variables, set to \"true\"\n      */\n    function extractTuple(\n        bytes memory tuple,\n        uint256 index,\n        bool[] memory isDynamicTypeFormat\n    ) public pure returns (bytes32) {\n        uint256 offset;\n        uint256 length;\n        assembly {\n            offset := add(mload(add(tuple, mul(add(index, 1), 32))), 32)\n        }\n        for (uint256 i = 0; i < isDynamicTypeFormat.length; i++) {\n            length += 32;\n            if (isDynamicTypeFormat[i]) {\n                assembly {\n                    let paramOffset := add(offset, mload(add(tuple, add(offset, mul(i, 32)))))\n                    let paramLength := add(mload(add(tuple, paramOffset)), 32)\n                    if gt(mod(paramLength, 32), 0) {\n                      paramLength := mul(add(div(paramLength, 32), 1), 32)\n                    }\n                    length := add(length, paramLength)\n                }\n            }\n        }\n        assembly {\n            return(add(tuple, add(mload(add(tuple, mul(add(index, 1), 32))), 32)), length)\n        }\n    }\n\n    /**\n      * @notice Extract a bytes encoded static array from a tuple\n      * @dev Use with .rawValue() in the weiroll planner\n      * @param tuple The bytes encoded array\n      * @param index The index of the array to be extracted\n      */\n    function extractArray(bytes memory tuple, uint256 index) public pure returns (bytes32) {\n        assembly {\n            // let offset := add(mload(add(tuple, mul(add(index, 1), 32))), 32)\n            // let numberOfElements := mload(add(tuple, offset))\n            // return(add(tuple, add(offset, 32)), mul(numberOfElements, 32))\n            return(add(tuple, add(add(mload(add(tuple, mul(add(index, 1), 32))), 32), 32)), mul(mload(add(tuple, add(mload(add(tuple, mul(add(index, 1), 32))), 32))), 32))\n        }\n    }\n\n    /**\n      * @notice Extract a bytes encoded dynamic array from a tuple\n      * @dev Use with .rawValue() in the weiroll planner\n      * @param tuple The bytes encoded tuple\n      * @param index The index of the dynamic array to be extracted\n      */\n    function extractDynamicArray(bytes memory tuple, uint256 index) public pure returns (bytes32) {\n        uint256 numberOfElements;\n        uint256 offset;\n        assembly {\n            offset := add(mload(add(tuple, mul(add(index, 1), 32))), 32)\n            numberOfElements := mload(add(tuple, offset))\n            //numberOfElements := mload(add(tuple, add(mload(add(tuple, mul(add(index, 1), 32))), 32)))\n        }\n\n        uint256 length;\n        for (uint256 i = 1; i <= numberOfElements; i++) {\n            assembly {\n                let paramOffset := add(offset, mul(add(i, 1), 32))\n                let paramLength := mload(add(tuple, paramOffset))\n                if gt(mod(paramLength, 32), 0) {\n                  paramLength := mul(add(div(paramLength, 32), 1), 32)\n                }\n                length := add(length, paramLength)\n                //length := add(length, mload(add(tuple, add(add(mload(add(tuple, mul(add(index, 1), 32))), 32), mul(add(i, 1), 32)))))\n            }\n        }\n        assembly {\n            // return(add(tuple, add(offset, 32)), add(length, 32))\n            return(add(tuple, add(add(mload(add(tuple, mul(add(index, 1), 32))), 32), 32)), add(length, 32))\n        }\n    }\n\n    /**\n      * @notice Extract a bytes encoded array of tuples from a tuple\n      * @dev Use with .rawValue() in the weiroll planner\n      * @param tuple The bytes encoded tuple\n      * @param index The index of the tuple array to be extracted\n      * @param isDynamicTypeFormat Boolean to define whether the tuples in the array are dynamically sized. If the array tuple contains bytes or string variables, set to \"true\"\n      */\n    function extractTupleArray(\n        bytes memory tuple,\n        uint256 index,\n        bool[] memory isDynamicTypeFormat\n    ) public pure returns (bytes32) {\n        uint256 numberOfElements;\n        assembly {\n            // let offset := add(mload(add(tuple, mul(add(index, 1), 32))), 32)\n            // numberOfElements := mload(add(tuple, offset))\n            numberOfElements := mload(add(tuple, add(mload(add(tuple, mul(add(index, 1), 32))), 32)))\n        }\n        uint256 length = numberOfElements * 32;\n        for (uint256 i = 1; i <= numberOfElements; i++) {\n            for (uint256 j = 0; j < isDynamicTypeFormat.length; j++) {\n                length += 32;\n                if (isDynamicTypeFormat[j]) {\n                    assembly {\n                        // let tupleOffset := add(offset,mload(add(tuple, add(offset, mul(i, 32)))))\n                        // let paramOffset := add(tupleOffset, mload(add(tuple, add(tupleOffset, mul(add(j,1), 32)))))\n                        // let paramLength := add(mload(add(tuple, paramOffset)),32)\n                        // length := add(length, paramLength)\n                        length := add(length, add(mload(add(tuple, add(add(add(mload(add(tuple, mul(add(index, 1), 32))), 32),mload(add(tuple, add(add(mload(add(tuple, mul(add(index, 1), 32))), 32), mul(i, 32))))), mload(add(tuple, add(add(add(mload(add(tuple, mul(add(index, 1), 32))), 32),mload(add(tuple, add(add(mload(add(tuple, mul(add(index, 1), 32))), 32), mul(i, 32))))), mul(add(j,1), 32))))))),32))\n                    }\n                }\n            }\n        }\n        assembly {\n            // return(add(tuple, add(offset,32)), length)\n            return(add(tuple, add(add(mload(add(tuple, mul(add(index, 1), 32))), 32),32)), length)\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IVM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\ninterface IVM {\n    function execute(bytes32[] calldata commands, bytes[] calldata state) external payable returns (bytes[] memory);\n}\n"
    },
    "contracts/test/DestructEnsoWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ncontract Destroyer {\n    function kill() public returns (bytes[] memory data) {\n        selfdestruct(payable(msg.sender));\n        return data;\n    }\n}\n\ncontract DestructEnsoWallet {\n    address public caller;\n    bool public init;\n\n    event DelegateCallReturn(bool success, bytes ret);\n\n    error AlreadyInit();\n    error NotCaller();\n\n    function initialize(\n        address caller_,\n        bytes32[] calldata commands,\n        bytes[] calldata state\n    ) external payable {\n        if (init) revert AlreadyInit();\n        caller = caller_;\n        init = true;\n        if (commands.length != 0) {\n            execute(commands, state);\n        }\n    }\n\n    function execute(bytes32[] calldata commands, bytes[] calldata state) public returns (bytes[] memory data) {\n        if (msg.sender != caller) revert NotCaller();\n        Destroyer destroyer = new Destroyer();\n        (bool success, bytes memory ret) = address(destroyer).delegatecall(\n            abi.encodeWithSelector(destroyer.kill.selector, commands, state)\n        );\n        emit DelegateCallReturn(success, ret);\n        return data;\n    }\n}\n"
    },
    "contracts/test/DumbEnsoWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ncontract DumbEnsoWallet {\n    address public caller;\n\n    event VMData(bytes32[] commands, bytes[] state);\n    event SenderData(address sender, uint256 value);\n\n    // Already initialized\n    error AlreadyInit();\n    // Not caller\n    error NotCaller();\n    // Invalid address\n    error InvalidAddress();\n\n    function initialize(\n        address caller_,\n        bytes32[] calldata commands,\n        bytes[] calldata state\n    ) external payable {\n        if (caller != address(0)) revert AlreadyInit();\n        caller = caller_;\n        if (commands.length != 0) {\n            execute(commands, state);\n        }\n    }\n\n    function execute(bytes32[] calldata commands, bytes[] calldata state) public payable returns (bytes[] memory) {\n        return _execute(commands, state);\n    }\n\n    function _execute(bytes32[] calldata commands, bytes[] memory state) internal returns (bytes[] memory) {\n        emit VMData(commands, state);\n        emit SenderData(msg.sender, msg.value);\n        // TODO: foundry bug?\n        //      comparing to address(this) / msg.sender doesn't return the address alone\n        //           ie.\n        //           val: EnsoWalletFactoryTest: [0xb4c79dab8f259c7aee6e5b2aa729821864227e84])\n        //           val: 0xb42486fb2979f5f97072f2f4af6673782f846963)\n        // if (msg.sender != caller) revert NotCaller();\n        return state;\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/test/Events.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\ncontract Events {\n    event LogBytes(bytes message);\n    event LogString(string message);\n    event LogBytes32(bytes32 message);\n    event LogUint(uint256 message);\n\n    function logBytes(bytes calldata message) external {\n        emit LogBytes(message);\n    }\n\n    function logString(string calldata message) external {\n        emit LogString(message);\n    }\n\n    function logBytes32(bytes32 message) external {\n        emit LogBytes32(message);\n    }\n\n    function logUint(uint256 message) external {\n        emit LogUint(message);\n    }\n}\n"
    },
    "contracts/test/PayableEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\ncontract PayableEvents {\n    event LogBytes(bytes message);\n    event LogString(string message);\n    event LogBytes32(bytes32 message);\n    event LogUint(uint256 message);\n\n    function logBytes(bytes calldata message) external payable {\n        emit LogBytes(message);\n    }\n\n    function logString(string calldata message) external payable {\n        emit LogString(message);\n    }\n\n    function logBytes32(bytes32 message) external payable {\n        emit LogBytes32(message);\n    }\n\n    function logUint(uint256 message) external payable {\n        emit LogUint(message);\n    }\n\n    function logValue() external payable {\n        emit LogUint(msg.value);\n    }\n}\n"
    },
    "contracts/test/TupleFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nstruct Example {\n    uint256 a;\n    string b;\n}\n\ncontract TupleFactory {\n    uint256 exampleInt1 = 0xcafe;\n    uint256 exampleInt2 = 0xdead;\n    uint256 exampleInt3 = 0xbeef;\n    string exampleString = \"Hello World!Hello World!Hello World!Hello World!Hello World!\"; // 5x \"Hello World!\"\n    Example exampleStruct = Example(exampleInt1, exampleString);\n\n    string[] exampleStringArray;\n    uint256[] exampleIntArray;\n    Example[] exampleStructArray;\n    bytes10 exampleBytes;\n\n    constructor() {\n        exampleStringArray.push(exampleString);\n        exampleStringArray.push(exampleString);\n\n        exampleIntArray.push(exampleInt1);\n        exampleIntArray.push(exampleInt2);\n        exampleIntArray.push(exampleInt3);\n\n        exampleStructArray.push(Example(exampleInt1, exampleString));\n        exampleStructArray.push(Example(exampleInt2, exampleString));\n        exampleStructArray.push(Example(exampleInt3, exampleString));\n\n        assembly {\n            sstore(exampleBytes.slot, sload(exampleString.slot))\n        }\n    }\n\n    function allTypesTuple()\n        public\n        view\n        returns (\n            uint256,\n            string memory,\n            uint256[] memory,\n            string[] memory,\n            Example memory,\n            Example[] memory\n        )\n    {\n        return (exampleInt1, exampleString, exampleIntArray, exampleStringArray, exampleStruct, exampleStructArray);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}