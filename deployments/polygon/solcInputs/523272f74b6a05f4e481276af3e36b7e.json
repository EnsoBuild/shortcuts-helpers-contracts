{
  "language": "Solidity",
  "sources": {
    "contracts/EnsoWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {VM} from \"@ensofinance/weiroll/contracts/VM.sol\";\n\ncontract EnsoWallet is VM {\n    address public caller;\n    bool public initialized;\n\n    // Already initialized\n    error AlreadyInit();\n    // Not caller\n    error NotCaller();\n    // Invalid address\n    error InvalidAddress();\n\n    function initialize(\n        address caller_,\n        bytes32[] calldata commands,\n        bytes[] calldata state\n    ) external payable {\n        if (initialized) revert AlreadyInit();\n        caller = caller_;\n        if (commands.length != 0) {\n            _execute(commands, state);\n        }\n    }\n\n    function execute(bytes32[] calldata commands, bytes[] calldata state)\n        external\n        payable\n        returns (bytes[] memory returnData)\n    {\n        if (msg.sender != caller) revert NotCaller();\n        returnData = _execute(commands, state);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "@ensofinance/weiroll/contracts/VM.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nimport \"./CommandBuilder.sol\";\n\nabstract contract VM {\n    using CommandBuilder for bytes[];\n\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00;\n    uint256 constant FLAG_CT_CALL = 0x01;\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\n    uint256 constant FLAG_CT_MASK = 0x03;\n    uint256 constant FLAG_TUPLE_RETURN = 0x80;\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x40;\n    uint256 constant FLAG_DATA = 0x20;\n\n    uint256 constant SHORT_COMMAND_FILL =\n        0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    address immutable self;\n\n    error ExecutionFailed(\n        uint256 command_index,\n        address target,\n        string message\n    );\n\n    constructor() {\n        self = address(this);\n    }\n\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\n        internal\n        returns (bytes[] memory)\n    {\n        bytes32 command;\n        uint256 flags;\n        bytes32 indices;\n\n        bool success;\n        bytes memory outdata;\n\n        uint256 commandsLength = commands.length;\n        for (uint256 i; i < commandsLength; i = _uncheckedIncrement(i)) {\n            command = commands[i];\n            flags = uint256(uint8(bytes1(command << 32)));\n\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\n                i = _uncheckedIncrement(i);\n                indices = commands[i];\n            } else {\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\n            }\n\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\n                (success, outdata) = address(uint160(uint256(command))) // target\n                    .delegatecall(\n                        // inputs\n                        flags & FLAG_DATA == 0\n                            ? state.buildInputs(\n                                bytes4(command), // selector\n                                indices\n                            )\n                            : state[\n                                uint8(bytes1(indices)) &\n                                    CommandBuilder.IDX_VALUE_MASK\n                            ]\n                    );\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\n                (success, outdata) = address(uint160(uint256(command))).call( // target\n                    // inputs\n                    flags & FLAG_DATA == 0\n                        ? state.buildInputs(\n                            bytes4(command), // selector\n                            indices\n                        )\n                        : state[\n                            uint8(bytes1(indices)) &\n                                CommandBuilder.IDX_VALUE_MASK\n                        ]\n                );\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\n                (success, outdata) = address(uint160(uint256(command))) // target\n                    .staticcall(\n                        // inputs\n                        flags & FLAG_DATA == 0\n                            ? state.buildInputs(\n                                bytes4(command), // selector\n                                indices\n                            )\n                            : state[\n                                uint8(bytes1(indices)) &\n                                    CommandBuilder.IDX_VALUE_MASK\n                            ]\n                    );\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\n                uint256 calleth;\n                bytes memory v = state[uint8(bytes1(indices))];\n                assembly {\n                    calleth := mload(add(v, 0x20))\n                }\n                (success, outdata) = address(uint160(uint256(command))).call{ // target\n                    value: calleth\n                }(\n                    // inputs\n                    flags & FLAG_DATA == 0\n                        ? state.buildInputs(\n                            bytes4(command), // selector\n                            indices << 8 // skip value input\n                        )\n                        : state[\n                            uint8(\n                                bytes1(indices << 8) // first byte after value input\n                            ) & CommandBuilder.IDX_VALUE_MASK\n                        ]\n                );\n            } else {\n                revert(\"Invalid calltype\");\n            }\n\n            if (!success) {\n                if (outdata.length > 0) {\n                    assembly {\n                        outdata := add(outdata, 68)\n                    }\n                }\n                revert ExecutionFailed({\n                    command_index: i,\n                    target: address(uint160(uint256(command))),\n                    message: outdata.length > 0 ? string(outdata) : \"Unknown\"\n                });\n            }\n\n            if (flags & FLAG_TUPLE_RETURN != 0) {\n                state.writeTuple(bytes1(command << 88), outdata);\n            } else {\n                state = state.writeOutputs(bytes1(command << 88), outdata);\n            }\n        }\n        return state;\n    }\n\n    function _uncheckedIncrement(uint256 i) private pure returns (uint256) {\n        unchecked {\n            ++i;\n        }\n        return i;\n    }\n}\n"
    },
    "@ensofinance/weiroll/contracts/CommandBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nlibrary CommandBuilder {\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\n    uint256 constant IDX_VALUE_MASK = 0x7f;\n    uint256 constant IDX_END_OF_ARGS = 0xff;\n    uint256 constant IDX_USE_STATE = 0xfe;\n\n    function buildInputs(\n        bytes[] memory state,\n        bytes4 selector,\n        bytes32 indices\n    ) internal view returns (bytes memory ret) {\n        uint256 idx;\n\n        uint256 count; // Number of bytes in whole ABI encoded message\n        uint256 free; // Pointer to first free byte in tail part of message\n        bytes memory stateData; // Optionally encode the current state if the call requires it\n\n        // Determine the length of the encoded data\n        for (uint256 i; i < 32; ) {\n            idx = uint8(indices[i]);\n            if (idx == IDX_END_OF_ARGS) break;\n\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\n                if (idx == IDX_USE_STATE) {\n                    if (stateData.length == 0) {\n                        stateData = abi.encode(state);\n                    }\n                    count += stateData.length;\n                } else {\n                    // Add the size of the value, rounded up to the next word boundary, plus space for pointer and length\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\n                    require(\n                        arglen % 32 == 0,\n                        \"Dynamic state variables must be a multiple of 32 bytes\"\n                    );\n                    count += arglen + 32;\n                }\n            } else {\n                require(\n                    state[idx & IDX_VALUE_MASK].length == 32,\n                    \"Static state variables must be 32 bytes\"\n                );\n                count += 32;\n            }\n            unchecked {\n                free += 32;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Encode it\n        ret = new bytes(count + 4);\n        assembly {\n            mstore(add(ret, 32), selector)\n        }\n        count = 0;\n        for (uint256 i; i < 32; ) {\n            idx = uint8(indices[i]);\n            if (idx == IDX_END_OF_ARGS) break;\n\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\n                if (idx == IDX_USE_STATE) {\n                    assembly {\n                        mstore(add(add(ret, 36), count), free)\n                    }\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\n                    free += stateData.length - 32;\n                } else {\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\n\n                    // Variable length data; put a pointer in the slot and write the data at the end\n                    assembly {\n                        mstore(add(add(ret, 36), count), free)\n                    }\n                    memcpy(\n                        state[idx & IDX_VALUE_MASK],\n                        0,\n                        ret,\n                        free + 4,\n                        arglen\n                    );\n                    free += arglen;\n                }\n            } else {\n                // Fixed length data; write it directly\n                bytes memory statevar = state[idx & IDX_VALUE_MASK];\n                assembly {\n                    mstore(add(add(ret, 36), count), mload(add(statevar, 32)))\n                }\n            }\n            unchecked {\n                count += 32;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function writeOutputs(\n        bytes[] memory state,\n        bytes1 index,\n        bytes memory output\n    ) internal pure returns (bytes[] memory) {\n        uint256 idx = uint8(index);\n        if (idx == IDX_END_OF_ARGS) return state;\n\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\n            if (idx == IDX_USE_STATE) {\n                state = abi.decode(output, (bytes[]));\n            } else {\n                // Check the first field is 0x20 (because we have only a single return value)\n                uint256 argptr;\n                assembly {\n                    argptr := mload(add(output, 32))\n                }\n                require(\n                    argptr == 32,\n                    \"Only one return value permitted (variable)\"\n                );\n\n                assembly {\n                    // Overwrite the first word of the return data with the length - 32\n                    mstore(add(output, 32), sub(mload(output), 32))\n                    // Insert a pointer to the return data, starting at the second word, into state\n                    mstore(\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\n                        add(output, 32)\n                    )\n                }\n            }\n        } else {\n            // Single word\n            require(\n                output.length == 32,\n                \"Only one return value permitted (static)\"\n            );\n\n            state[idx & IDX_VALUE_MASK] = output;\n        }\n\n        return state;\n    }\n\n    function writeTuple(\n        bytes[] memory state,\n        bytes1 index,\n        bytes memory output\n    ) internal view {\n        uint256 idx = uint256(uint8(index));\n        if (idx == IDX_END_OF_ARGS) return;\n\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\n        memcpy(output, 0, entry, 32, output.length);\n        assembly {\n            let l := mload(output)\n            mstore(add(entry, 32), l)\n        }\n    }\n\n    function memcpy(\n        bytes memory src,\n        uint256 srcidx,\n        bytes memory dest,\n        uint256 destidx,\n        uint256 len\n    ) internal view {\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    4,\n                    add(add(src, 32), srcidx),\n                    len,\n                    add(add(dest, 32), destidx),\n                    len\n                )\n            )\n        }\n    }\n}\n"
    },
    "contracts/EnsoWalletFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./EnsoWallet.sol\";\nimport {Clones} from \"./Libraries/Clones.sol\";\n\ncontract EnsoWalletFactory {\n    using Clones for address;\n\n    address public immutable ensoWallet;\n\n    event Deployed(EnsoWallet instance);\n\n    constructor(address EnsoWallet_) {\n        ensoWallet = EnsoWallet_;\n    }\n\n    function deploy(bytes32[] calldata commands, bytes[] calldata state) public payable returns (EnsoWallet instance) {\n        instance = EnsoWallet(payable(ensoWallet.cloneDeterministic(msg.sender)));\n        instance.initialize{value: msg.value}(msg.sender, commands, state);\n\n        emit Deployed(instance);\n    }\n\n    function getAddress() public view returns (address payable) {\n        return payable(ensoWallet.predictDeterministicAddress(msg.sender, address(this)));\n    }\n}\n"
    },
    "contracts/Libraries/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n// Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Clones.sol\n\npragma solidity ^0.8.0;\n\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, address salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        address salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n}\n"
    },
    "contracts/ShortcutsHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract EnsoShortcutsHelper {\n    uint256 constant VERSION = 1;\n\n    function getBalance(address balanceAddress) public view returns (uint256 balance) {\n        return address(balanceAddress).balance;\n    }\n\n    function getBlockTimestamp() public view returns (uint256 timestamp) {\n        return block.timestamp;\n    }\n\n    function bytesToString(bytes calldata input) public pure returns (string memory) {\n        return string(abi.encodePacked(input));\n    }\n\n    function bytes32ToUint256(bytes32 input) public pure returns (uint256) {\n        return uint256(input);\n    }\n\n    function bytes32ToAddress(bytes32 input) public pure returns (address) {\n        return address(uint160(uint256(input)));\n    }\n}\n"
    },
    "contracts/interfaces/IVM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IVM {\n    function execute(bytes32[] calldata commands, bytes[] calldata state) external payable returns (bytes[] memory);\n}\n"
    },
    "contracts/test/DestructEnsoWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ncontract Destroyer {\n    function kill() public returns (bytes[] memory data) {\n        selfdestruct(payable(msg.sender));\n        return data;\n    }\n}\n\ncontract DestructEnsoWallet {\n    address public caller;\n    bool public init;\n\n    event DelegateCallReturn(bool success, bytes ret);\n\n    error AlreadyInit();\n    error NotCaller();\n\n    function initialize(\n        address caller_,\n        bytes32[] calldata commands,\n        bytes[] calldata state\n    ) external payable {\n        if (init) revert AlreadyInit();\n        caller = caller_;\n        init = true;\n        if (commands.length != 0) {\n            execute(commands, state);\n        }\n    }\n\n    function execute(bytes32[] calldata commands, bytes[] calldata state) public returns (bytes[] memory data) {\n        if (msg.sender != caller) revert NotCaller();\n        Destroyer destroyer = new Destroyer();\n        (bool success, bytes memory ret) = address(destroyer).delegatecall(\n            abi.encodeWithSelector(destroyer.kill.selector, commands, state)\n        );\n        emit DelegateCallReturn(success, ret);\n        return data;\n    }\n}\n"
    },
    "contracts/test/DumbEnsoWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ncontract DumbEnsoWallet {\n    address public caller;\n\n    event VMData(bytes32[] commands, bytes[] state);\n    event SenderData(address sender, uint256 value);\n\n    // Already initialized\n    error AlreadyInit();\n    // Not caller\n    error NotCaller();\n    // Invalid address\n    error InvalidAddress();\n\n    function initialize(\n        address caller_,\n        bytes32[] calldata commands,\n        bytes[] calldata state\n    ) external payable {\n        if (caller != address(0)) revert AlreadyInit();\n        caller = caller_;\n        if (commands.length != 0) {\n            execute(commands, state);\n        }\n    }\n\n    function execute(bytes32[] calldata commands, bytes[] calldata state) public payable returns (bytes[] memory) {\n        return _execute(commands, state);\n    }\n\n    function _execute(bytes32[] calldata commands, bytes[] memory state) internal returns (bytes[] memory) {\n        emit VMData(commands, state);\n        emit SenderData(msg.sender, msg.value);\n        // TODO: foundry bug?\n        //      comparing to address(this) / msg.sender doesn't return the address alone\n        //           ie.\n        //           val: EnsoWalletFactoryTest: [0xb4c79dab8f259c7aee6e5b2aa729821864227e84])\n        //           val: 0xb42486fb2979f5f97072f2f4af6673782f846963)\n        // if (msg.sender != caller) revert NotCaller();\n        return state;\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/test/Events.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract Events {\n    event LogBytes(bytes message);\n    event LogString(string message);\n    event LogBytes32(bytes32 message);\n    event LogUint(uint256 message);\n\n    function logBytes(bytes calldata message) external {\n        emit LogBytes(message);\n    }\n\n    function logString(string calldata message) external {\n        emit LogString(message);\n    }\n\n    function logBytes32(bytes32 message) external {\n        emit LogBytes32(message);\n    }\n\n    function logUint(uint256 message) external {\n        emit LogUint(message);\n    }\n}\n"
    },
    "contracts/test/PayableEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract PayableEvents {\n    event LogBytes(bytes message);\n    event LogString(string message);\n    event LogBytes32(bytes32 message);\n    event LogUint(uint256 message);\n\n    function logBytes(bytes calldata message) external payable {\n        emit LogBytes(message);\n    }\n\n    function logString(string calldata message) external payable {\n        emit LogString(message);\n    }\n\n    function logBytes32(bytes32 message) external payable {\n        emit LogBytes32(message);\n    }\n\n    function logUint(uint256 message) external payable {\n        emit LogUint(message);\n    }\n\n    function logValue() external payable {\n        emit LogUint(msg.value);\n    }\n}\n"
    },
    "contracts/test/TupleFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nstruct Example {\n    uint256 a;\n    string b;\n}\n\ncontract TupleFactory {\n    uint256 exampleInt1 = 0xcafe;\n    uint256 exampleInt2 = 0xdead;\n    uint256 exampleInt3 = 0xbeef;\n    string exampleString = \"Hello World!Hello World!Hello World!Hello World!Hello World!\"; // 5x \"Hello World!\"\n    Example exampleStruct = Example(exampleInt1, exampleString);\n\n    string[] exampleStringArray;\n    uint[] exampleIntArray;\n    Example[] exampleStructArray;\n    bytes10 exampleBytes;\n\n    constructor() {\n        exampleStringArray.push(exampleString);\n        exampleStringArray.push(exampleString);\n\n        exampleIntArray.push(exampleInt1);\n        exampleIntArray.push(exampleInt2);\n        exampleIntArray.push(exampleInt3);\n\n        exampleStructArray.push(Example(exampleInt1, exampleString));\n        exampleStructArray.push(Example(exampleInt2, exampleString));\n        exampleStructArray.push(Example(exampleInt3, exampleString));\n\n        assembly {\n            sstore(exampleBytes.slot, sload(exampleString.slot))\n        }\n    }\n\n    function allTypesTuple()\n        public\n        view\n        returns (\n            uint256,\n            string memory,\n            uint256[] memory,\n            string[] memory,\n            Example memory,\n            Example[] memory\n        )\n    {\n        return (exampleInt1, exampleString, exampleIntArray, exampleStringArray, exampleStruct, exampleStructArray);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}