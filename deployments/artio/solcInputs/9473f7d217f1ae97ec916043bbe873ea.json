{
  "language": "Solidity",
  "sources": {
    "contracts/EnsoShortcutsHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\n/**\n * @dev SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet.\n *\n * This contract functions allow to dynamically get the data during Shortcut transaction execution\n * that usually would be read between transactions\n */\ncontract EnsoShortcutsHelpers {\n    uint256 public constant VERSION = 3;\n\n    /**\n     * @dev Returns the ether balance of given `balanceAddress`.\n     */\n    function getBalance(address balanceAddress) external view returns (uint256 balance) {\n        return address(balanceAddress).balance;\n    }\n\n    /**\n     * @dev Returns the current block timestamp.\n     */\n    function getBlockTimestamp() external view returns (uint256 timestamp) {\n        return block.timestamp;\n    }\n\n    /**\n     * @dev Reverts depending on a truth condition\n     */\n    function check(bool condition) external pure {\n        if (!condition) revert(\"Condition not met\");\n    }\n\n    /**\n     * @dev Returns a value depending on a truth condition\n     */\n    function toggle(bool condition, uint256 a, uint256 b) external pure returns (uint256) {\n        if (condition) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n\n    /**\n     * @dev Returns the inverse bool\n     */\n    function not(bool condition) external pure returns (bool) {\n        return !condition;\n    }\n\n    /**\n     * @dev Returns bool for a == b\n     */\n    function isEqual(uint256 a, uint256 b) external pure returns (bool) {\n        return a == b;\n    }\n\n    /**\n     * @dev Returns bool for a < b\n     */\n    function isLessThan(uint256 a, uint256 b) external pure returns (bool) {\n        return a < b;\n    }\n\n    /**\n     * @dev Returns bool for a <= b\n     */\n    function isEqualOrLessThan(uint256 a, uint256 b) external pure returns (bool) {\n        return a <= b;\n    }\n\n    /**\n     * @dev Returns bool for a > b\n     */\n    function isGreaterThan(uint256 a, uint256 b) external pure returns (bool) {\n        return a > b;\n    }\n\n    /**\n     * @dev Returns bool for a >= b\n     */\n    function isEqualOrGreaterThan(uint256 a, uint256 b) external pure returns (bool) {\n        return a >= b;\n    }\n\n    /**\n     * @dev Returns bool for a == b\n     */\n    function isAddressEqual(address a, address b) external pure returns (bool) {\n        return a == b;\n    }\n\n    /**\n     * @dev Returns `input` bytes as string.\n     */\n    function bytesToString(bytes calldata input) external pure returns (string memory) {\n        return string(abi.encodePacked(input));\n    }\n\n    /**\n     * @dev Returns `input` bytes as uint256.\n     */\n    function bytesToUint256(bytes calldata input) external pure returns (uint256) {\n        require(input.length == 32, \"EnsoShortcutsHelpers: input length is not 32 bytes\");\n        return uint256(bytes32(input));\n    }\n\n    /**\n     * @dev Returns `input` bytes as bytes32.\n     */\n    function bytesToBytes32(bytes calldata input) external pure returns (bytes32) {\n        return bytes32(input);\n    }\n\n    /**\n     * @dev Returns `input` bytes32 as uint256.\n     */\n    function bytes32ToUint256(bytes32 input) external pure returns (uint256) {\n        return uint256(input);\n    }\n\n    /**\n     * @dev Returns `input` bytes32 as address.\n     */\n    function bytes32ToAddress(bytes32 input) external pure returns (address) {\n        return address(uint160(uint256(input)));\n    }\n\n    /**\n     * @dev Returns uint256 `value` as int256.\n     */\n    function uint256ToInt256(uint256 value) public pure returns (int256) {\n        require(value <= uint256(type(int256).max), \"Value does not fit in an int256\");\n        return int256(value);\n    }\n\n    /**\n     * @dev Returns int256 `value` as uint256.\n     */\n    function int256ToUint256(int256 value) public pure returns (uint256) {\n        require(value >= 0, \"Value must be positive\");\n        return uint256(value);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}