{
  "address": "0xD7707D4433fd2E36cf27559b9e467455Eb09B567",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ValueExceedsUint160Range",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currency1",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "int24",
          "name": "tickSpacing",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount0Max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Max",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "encodeMint",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currency1",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "int24",
          "name": "tickSpacing",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint256",
          "name": "amount0Max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Max",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "encodeMintFromDeltas",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currency1",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "int24",
          "name": "tickSpacing",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint256",
          "name": "amount0Max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Max",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hooks",
          "type": "address"
        }
      ],
      "name": "encodeMintFromDeltasWithHooks",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currency1",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "int24",
          "name": "tickSpacing",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount0Max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Max",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hooks",
          "type": "address"
        }
      ],
      "name": "encodeMintWithHooks",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "currency0",
              "type": "address"
            },
            {
              "internalType": "Currency",
              "name": "currency1",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "int24",
              "name": "tickSpacing",
              "type": "int24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            }
          ],
          "internalType": "struct PoolKey",
          "name": "poolKey",
          "type": "tuple"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityForAmounts",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currency1",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "int24",
          "name": "tickSpacing",
          "type": "int24"
        },
        {
          "internalType": "address",
          "name": "hooks",
          "type": "address"
        }
      ],
      "name": "getPoolKey",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "currency0",
              "type": "address"
            },
            {
              "internalType": "Currency",
              "name": "currency1",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "int24",
              "name": "tickSpacing",
              "type": "int24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            }
          ],
          "internalType": "struct PoolKey",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "contract IPoolManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "input",
          "type": "uint256"
        }
      ],
      "name": "uint256ToUint128",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "input",
          "type": "uint256"
        }
      ],
      "name": "uint256ToUint160",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x2bf563dcd6f9d632b4fcadd7cd43776aed6076092513b5ae6650ee041ef30890",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf754916D90B109AE8E405FD34064cF6Df23947eb",
    "contractAddress": null,
    "transactionIndex": 86,
    "gasUsed": "1192699",
    "logsBloom": "0x
    "blockHash": "0x2fabbabf83777b206970b8af9a30543cae6e26246bcab895bf8e407a40a2dee3",
    "transactionHash": "0x2bf563dcd6f9d632b4fcadd7cd43776aed6076092513b5ae6650ee041ef30890",
    "logs": [],
    "blockNumber": 22131631,
    "cumulativeGasUsed": "6792149",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x000000000004444c5dc75cB358380D2e3dE08A90"
  ],
  "numDeployments": 3,
  "solcInputHash": "0d0bcff70a6bf51f4b36852fcda2cb7d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ValueExceedsUint160Range\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Max\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"encodeMint\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Max\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"encodeMintFromDeltas\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Max\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hooks\",\"type\":\"address\"}],\"name\":\"encodeMintFromDeltasWithHooks\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Max\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hooks\",\"type\":\"address\"}],\"name\":\"encodeMintWithHooks\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"poolKey\",\"type\":\"tuple\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"getLiquidityForAmounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"address\",\"name\":\"hooks\",\"type\":\"address\"}],\"name\":\"getPoolKey\",\"outputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct PoolKey\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"uint256ToUint128\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"uint256ToUint160\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV4Helpers.sol\":\"UniswapV4Helpers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[]},\"sources\":{\"@uniswap/v4-core/src/interfaces/IExtsload.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface for functions to access any storage slot in a contract\\ninterface IExtsload {\\n    /// @notice Called by external contracts to access granular pool state\\n    /// @param slot Key of slot to sload\\n    /// @return value The value of the slot as bytes32\\n    function extsload(bytes32 slot) external view returns (bytes32 value);\\n\\n    /// @notice Called by external contracts to access granular pool state\\n    /// @param startSlot Key of slot to start sloading from\\n    /// @param nSlots Number of slots to load into return value\\n    /// @return values List of loaded values.\\n    function extsload(bytes32 startSlot, uint256 nSlots) external view returns (bytes32[] memory values);\\n\\n    /// @notice Called by external contracts to access sparse pool state\\n    /// @param slots List of slots to SLOAD from.\\n    /// @return values List of loaded values.\\n    function extsload(bytes32[] calldata slots) external view returns (bytes32[] memory values);\\n}\\n\",\"keccak256\":\"0x80b53ca4907d6f0088c3b931f2b72cad1dc4615a95094d96bd0fb8dff8d5ba43\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/IExttload.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Interface for functions to access any transient storage slot in a contract\\ninterface IExttload {\\n    /// @notice Called by external contracts to access transient storage of the contract\\n    /// @param slot Key of slot to tload\\n    /// @return value The value of the slot as bytes32\\n    function exttload(bytes32 slot) external view returns (bytes32 value);\\n\\n    /// @notice Called by external contracts to access sparse transient pool state\\n    /// @param slots List of slots to tload\\n    /// @return values List of loaded values\\n    function exttload(bytes32[] calldata slots) external view returns (bytes32[] memory values);\\n}\\n\",\"keccak256\":\"0xc6b68283ebd8d1c789df536756726eed51c589134bb20821b236a0d22a135937\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\nimport {BalanceDelta} from \\\"../types/BalanceDelta.sol\\\";\\nimport {IPoolManager} from \\\"./IPoolManager.sol\\\";\\nimport {BeforeSwapDelta} from \\\"../types/BeforeSwapDelta.sol\\\";\\n\\n/// @notice V4 decides whether to invoke specific hooks by inspecting the least significant bits\\n/// of the address that the hooks contract is deployed to.\\n/// For example, a hooks contract deployed to address: 0x0000000000000000000000000000000000002400\\n/// has the lowest bits '10 0100 0000 0000' which would cause the 'before initialize' and 'after add liquidity' hooks to be used.\\n/// See the Hooks library for the full spec.\\n/// @dev Should only be callable by the v4 PoolManager.\\ninterface IHooks {\\n    /// @notice The hook called before the state of a pool is initialized\\n    /// @param sender The initial msg.sender for the initialize call\\n    /// @param key The key for the pool being initialized\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool as a Q64.96\\n    /// @return bytes4 The function selector for the hook\\n    function beforeInitialize(address sender, PoolKey calldata key, uint160 sqrtPriceX96) external returns (bytes4);\\n\\n    /// @notice The hook called after the state of a pool is initialized\\n    /// @param sender The initial msg.sender for the initialize call\\n    /// @param key The key for the pool being initialized\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool as a Q64.96\\n    /// @param tick The current tick after the state of a pool is initialized\\n    /// @return bytes4 The function selector for the hook\\n    function afterInitialize(address sender, PoolKey calldata key, uint160 sqrtPriceX96, int24 tick)\\n        external\\n        returns (bytes4);\\n\\n    /// @notice The hook called before liquidity is added\\n    /// @param sender The initial msg.sender for the add liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for adding liquidity\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidity provider to be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeAddLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after liquidity is added\\n    /// @param sender The initial msg.sender for the add liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for adding liquidity\\n    /// @param delta The caller's balance delta after adding liquidity; the sum of principal delta, fees accrued, and hook delta\\n    /// @param feesAccrued The fees accrued since the last time fees were collected from this position\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidity provider to be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    /// @return BalanceDelta The hook's delta in token0 and token1. Positive: the hook is owed/took currency, negative: the hook owes/sent currency\\n    function afterAddLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        BalanceDelta delta,\\n        BalanceDelta feesAccrued,\\n        bytes calldata hookData\\n    ) external returns (bytes4, BalanceDelta);\\n\\n    /// @notice The hook called before liquidity is removed\\n    /// @param sender The initial msg.sender for the remove liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for removing liquidity\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidity provider to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeRemoveLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after liquidity is removed\\n    /// @param sender The initial msg.sender for the remove liquidity call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for removing liquidity\\n    /// @param delta The caller's balance delta after removing liquidity; the sum of principal delta, fees accrued, and hook delta\\n    /// @param feesAccrued The fees accrued since the last time fees were collected from this position\\n    /// @param hookData Arbitrary data handed into the PoolManager by the liquidity provider to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    /// @return BalanceDelta The hook's delta in token0 and token1. Positive: the hook is owed/took currency, negative: the hook owes/sent currency\\n    function afterRemoveLiquidity(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.ModifyLiquidityParams calldata params,\\n        BalanceDelta delta,\\n        BalanceDelta feesAccrued,\\n        bytes calldata hookData\\n    ) external returns (bytes4, BalanceDelta);\\n\\n    /// @notice The hook called before a swap\\n    /// @param sender The initial msg.sender for the swap call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for the swap\\n    /// @param hookData Arbitrary data handed into the PoolManager by the swapper to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    /// @return BeforeSwapDelta The hook's delta in specified and unspecified currencies. Positive: the hook is owed/took currency, negative: the hook owes/sent currency\\n    /// @return uint24 Optionally override the lp fee, only used if three conditions are met: 1. the Pool has a dynamic fee, 2. the value's 2nd highest bit is set (23rd bit, 0x400000), and 3. the value is less than or equal to the maximum fee (1 million)\\n    function beforeSwap(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.SwapParams calldata params,\\n        bytes calldata hookData\\n    ) external returns (bytes4, BeforeSwapDelta, uint24);\\n\\n    /// @notice The hook called after a swap\\n    /// @param sender The initial msg.sender for the swap call\\n    /// @param key The key for the pool\\n    /// @param params The parameters for the swap\\n    /// @param delta The amount owed to the caller (positive) or owed to the pool (negative)\\n    /// @param hookData Arbitrary data handed into the PoolManager by the swapper to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    /// @return int128 The hook's delta in unspecified currency. Positive: the hook is owed/took currency, negative: the hook owes/sent currency\\n    function afterSwap(\\n        address sender,\\n        PoolKey calldata key,\\n        IPoolManager.SwapParams calldata params,\\n        BalanceDelta delta,\\n        bytes calldata hookData\\n    ) external returns (bytes4, int128);\\n\\n    /// @notice The hook called before donate\\n    /// @param sender The initial msg.sender for the donate call\\n    /// @param key The key for the pool\\n    /// @param amount0 The amount of token0 being donated\\n    /// @param amount1 The amount of token1 being donated\\n    /// @param hookData Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function beforeDonate(\\n        address sender,\\n        PoolKey calldata key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /// @notice The hook called after donate\\n    /// @param sender The initial msg.sender for the donate call\\n    /// @param key The key for the pool\\n    /// @param amount0 The amount of token0 being donated\\n    /// @param amount1 The amount of token1 being donated\\n    /// @param hookData Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook\\n    /// @return bytes4 The function selector for the hook\\n    function afterDonate(\\n        address sender,\\n        PoolKey calldata key,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4c9571aed0c2b6ef11832545554fc11ffdb03746daaf5c73683c00600bfc7ec0\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {Currency} from \\\"../types/Currency.sol\\\";\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\nimport {IHooks} from \\\"./IHooks.sol\\\";\\nimport {IERC6909Claims} from \\\"./external/IERC6909Claims.sol\\\";\\nimport {IProtocolFees} from \\\"./IProtocolFees.sol\\\";\\nimport {BalanceDelta} from \\\"../types/BalanceDelta.sol\\\";\\nimport {PoolId} from \\\"../types/PoolId.sol\\\";\\nimport {IExtsload} from \\\"./IExtsload.sol\\\";\\nimport {IExttload} from \\\"./IExttload.sol\\\";\\n\\n/// @notice Interface for the PoolManager\\ninterface IPoolManager is IProtocolFees, IERC6909Claims, IExtsload, IExttload {\\n    /// @notice Thrown when a currency is not netted out after the contract is unlocked\\n    error CurrencyNotSettled();\\n\\n    /// @notice Thrown when trying to interact with a non-initialized pool\\n    error PoolNotInitialized();\\n\\n    /// @notice Thrown when unlock is called, but the contract is already unlocked\\n    error AlreadyUnlocked();\\n\\n    /// @notice Thrown when a function is called that requires the contract to be unlocked, but it is not\\n    error ManagerLocked();\\n\\n    /// @notice Pools are limited to type(int16).max tickSpacing in #initialize, to prevent overflow\\n    error TickSpacingTooLarge(int24 tickSpacing);\\n\\n    /// @notice Pools must have a positive non-zero tickSpacing passed to #initialize\\n    error TickSpacingTooSmall(int24 tickSpacing);\\n\\n    /// @notice PoolKey must have currencies where address(currency0) < address(currency1)\\n    error CurrenciesOutOfOrderOrEqual(address currency0, address currency1);\\n\\n    /// @notice Thrown when a call to updateDynamicLPFee is made by an address that is not the hook,\\n    /// or on a pool that does not have a dynamic swap fee.\\n    error UnauthorizedDynamicLPFeeUpdate();\\n\\n    /// @notice Thrown when trying to swap amount of 0\\n    error SwapAmountCannotBeZero();\\n\\n    ///@notice Thrown when native currency is passed to a non native settlement\\n    error NonzeroNativeValue();\\n\\n    /// @notice Thrown when `clear` is called with an amount that is not exactly equal to the open currency delta.\\n    error MustClearExactPositiveDelta();\\n\\n    /// @notice Emitted when a new pool is initialized\\n    /// @param id The abi encoded hash of the pool key struct for the new pool\\n    /// @param currency0 The first currency of the pool by address sort order\\n    /// @param currency1 The second currency of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param hooks The hooks contract address for the pool, or address(0) if none\\n    /// @param sqrtPriceX96 The price of the pool on initialization\\n    /// @param tick The initial tick of the pool corresponding to the initialized price\\n    event Initialize(\\n        PoolId indexed id,\\n        Currency indexed currency0,\\n        Currency indexed currency1,\\n        uint24 fee,\\n        int24 tickSpacing,\\n        IHooks hooks,\\n        uint160 sqrtPriceX96,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted when a liquidity position is modified\\n    /// @param id The abi encoded hash of the pool key struct for the pool that was modified\\n    /// @param sender The address that modified the pool\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param liquidityDelta The amount of liquidity that was added or removed\\n    /// @param salt The extra data to make positions unique\\n    event ModifyLiquidity(\\n        PoolId indexed id, address indexed sender, int24 tickLower, int24 tickUpper, int256 liquidityDelta, bytes32 salt\\n    );\\n\\n    /// @notice Emitted for swaps between currency0 and currency1\\n    /// @param id The abi encoded hash of the pool key struct for the pool that was modified\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param amount0 The delta of the currency0 balance of the pool\\n    /// @param amount1 The delta of the currency1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of the price of the pool after the swap\\n    /// @param fee The swap fee in hundredths of a bip\\n    event Swap(\\n        PoolId indexed id,\\n        address indexed sender,\\n        int128 amount0,\\n        int128 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick,\\n        uint24 fee\\n    );\\n\\n    /// @notice Emitted for donations\\n    /// @param id The abi encoded hash of the pool key struct for the pool that was donated to\\n    /// @param sender The address that initiated the donate call\\n    /// @param amount0 The amount donated in currency0\\n    /// @param amount1 The amount donated in currency1\\n    event Donate(PoolId indexed id, address indexed sender, uint256 amount0, uint256 amount1);\\n\\n    /// @notice All interactions on the contract that account deltas require unlocking. A caller that calls `unlock` must implement\\n    /// `IUnlockCallback(msg.sender).unlockCallback(data)`, where they interact with the remaining functions on this contract.\\n    /// @dev The only functions callable without an unlocking are `initialize` and `updateDynamicLPFee`\\n    /// @param data Any data to pass to the callback, via `IUnlockCallback(msg.sender).unlockCallback(data)`\\n    /// @return The data returned by the call to `IUnlockCallback(msg.sender).unlockCallback(data)`\\n    function unlock(bytes calldata data) external returns (bytes memory);\\n\\n    /// @notice Initialize the state for a given pool ID\\n    /// @dev A swap fee totaling MAX_SWAP_FEE (100%) makes exact output swaps impossible since the input is entirely consumed by the fee\\n    /// @param key The pool key for the pool to initialize\\n    /// @param sqrtPriceX96 The initial square root price\\n    /// @return tick The initial tick of the pool\\n    function initialize(PoolKey memory key, uint160 sqrtPriceX96) external returns (int24 tick);\\n\\n    struct ModifyLiquidityParams {\\n        // the lower and upper tick of the position\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // how to modify the liquidity\\n        int256 liquidityDelta;\\n        // a value to set if you want unique liquidity positions at the same range\\n        bytes32 salt;\\n    }\\n\\n    /// @notice Modify the liquidity for the given pool\\n    /// @dev Poke by calling with a zero liquidityDelta\\n    /// @param key The pool to modify liquidity in\\n    /// @param params The parameters for modifying the liquidity\\n    /// @param hookData The data to pass through to the add/removeLiquidity hooks\\n    /// @return callerDelta The balance delta of the caller of modifyLiquidity. This is the total of both principal, fee deltas, and hook deltas if applicable\\n    /// @return feesAccrued The balance delta of the fees generated in the liquidity range. Returned for informational purposes\\n    /// @dev Note that feesAccrued can be artificially inflated by a malicious actor and integrators should be careful using the value\\n    /// For pools with a single liquidity position, actors can donate to themselves to inflate feeGrowthGlobal (and consequently feesAccrued)\\n    /// atomically donating and collecting fees in the same unlockCallback may make the inflated value more extreme\\n    function modifyLiquidity(PoolKey memory key, ModifyLiquidityParams memory params, bytes calldata hookData)\\n        external\\n        returns (BalanceDelta callerDelta, BalanceDelta feesAccrued);\\n\\n    struct SwapParams {\\n        /// Whether to swap token0 for token1 or vice versa\\n        bool zeroForOne;\\n        /// The desired input amount if negative (exactIn), or the desired output amount if positive (exactOut)\\n        int256 amountSpecified;\\n        /// The sqrt price at which, if reached, the swap will stop executing\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swap against the given pool\\n    /// @param key The pool to swap in\\n    /// @param params The parameters for swapping\\n    /// @param hookData The data to pass through to the swap hooks\\n    /// @return swapDelta The balance delta of the address swapping\\n    /// @dev Swapping on low liquidity pools may cause unexpected swap amounts when liquidity available is less than amountSpecified.\\n    /// Additionally note that if interacting with hooks that have the BEFORE_SWAP_RETURNS_DELTA_FLAG or AFTER_SWAP_RETURNS_DELTA_FLAG\\n    /// the hook may alter the swap input/output. Integrators should perform checks on the returned swapDelta.\\n    function swap(PoolKey memory key, SwapParams memory params, bytes calldata hookData)\\n        external\\n        returns (BalanceDelta swapDelta);\\n\\n    /// @notice Donate the given currency amounts to the in-range liquidity providers of a pool\\n    /// @dev Calls to donate can be frontrun adding just-in-time liquidity, with the aim of receiving a portion donated funds.\\n    /// Donors should keep this in mind when designing donation mechanisms.\\n    /// @dev This function donates to in-range LPs at slot0.tick. In certain edge-cases of the swap algorithm, the `sqrtPrice` of\\n    /// a pool can be at the lower boundary of tick `n`, but the `slot0.tick` of the pool is already `n - 1`. In this case a call to\\n    /// `donate` would donate to tick `n - 1` (slot0.tick) not tick `n` (getTickAtSqrtPrice(slot0.sqrtPriceX96)).\\n    /// Read the comments in `Pool.swap()` for more information about this.\\n    /// @param key The key of the pool to donate to\\n    /// @param amount0 The amount of currency0 to donate\\n    /// @param amount1 The amount of currency1 to donate\\n    /// @param hookData The data to pass through to the donate hooks\\n    /// @return BalanceDelta The delta of the caller after the donate\\n    function donate(PoolKey memory key, uint256 amount0, uint256 amount1, bytes calldata hookData)\\n        external\\n        returns (BalanceDelta);\\n\\n    /// @notice Writes the current ERC20 balance of the specified currency to transient storage\\n    /// This is used to checkpoint balances for the manager and derive deltas for the caller.\\n    /// @dev This MUST be called before any ERC20 tokens are sent into the contract, but can be skipped\\n    /// for native tokens because the amount to settle is determined by the sent value.\\n    /// However, if an ERC20 token has been synced and not settled, and the caller instead wants to settle\\n    /// native funds, this function can be called with the native currency to then be able to settle the native currency\\n    function sync(Currency currency) external;\\n\\n    /// @notice Called by the user to net out some value owed to the user\\n    /// @dev Will revert if the requested amount is not available, consider using `mint` instead\\n    /// @dev Can also be used as a mechanism for free flash loans\\n    /// @param currency The currency to withdraw from the pool manager\\n    /// @param to The address to withdraw to\\n    /// @param amount The amount of currency to withdraw\\n    function take(Currency currency, address to, uint256 amount) external;\\n\\n    /// @notice Called by the user to pay what is owed\\n    /// @return paid The amount of currency settled\\n    function settle() external payable returns (uint256 paid);\\n\\n    /// @notice Called by the user to pay on behalf of another address\\n    /// @param recipient The address to credit for the payment\\n    /// @return paid The amount of currency settled\\n    function settleFor(address recipient) external payable returns (uint256 paid);\\n\\n    /// @notice WARNING - Any currency that is cleared, will be non-retrievable, and locked in the contract permanently.\\n    /// A call to clear will zero out a positive balance WITHOUT a corresponding transfer.\\n    /// @dev This could be used to clear a balance that is considered dust.\\n    /// Additionally, the amount must be the exact positive balance. This is to enforce that the caller is aware of the amount being cleared.\\n    function clear(Currency currency, uint256 amount) external;\\n\\n    /// @notice Called by the user to move value into ERC6909 balance\\n    /// @param to The address to mint the tokens to\\n    /// @param id The currency address to mint to ERC6909s, as a uint256\\n    /// @param amount The amount of currency to mint\\n    /// @dev The id is converted to a uint160 to correspond to a currency address\\n    /// If the upper 12 bytes are not 0, they will be 0-ed out\\n    function mint(address to, uint256 id, uint256 amount) external;\\n\\n    /// @notice Called by the user to move value from ERC6909 balance\\n    /// @param from The address to burn the tokens from\\n    /// @param id The currency address to burn from ERC6909s, as a uint256\\n    /// @param amount The amount of currency to burn\\n    /// @dev The id is converted to a uint160 to correspond to a currency address\\n    /// If the upper 12 bytes are not 0, they will be 0-ed out\\n    function burn(address from, uint256 id, uint256 amount) external;\\n\\n    /// @notice Updates the pools lp fees for the a pool that has enabled dynamic lp fees.\\n    /// @dev A swap fee totaling MAX_SWAP_FEE (100%) makes exact output swaps impossible since the input is entirely consumed by the fee\\n    /// @param key The key of the pool to update dynamic LP fees for\\n    /// @param newDynamicLPFee The new dynamic pool LP fee\\n    function updateDynamicLPFee(PoolKey memory key, uint24 newDynamicLPFee) external;\\n}\\n\",\"keccak256\":\"0x3534f00531038e77ab8a7fc4d0a6e0993ee53fb7a396b1324ad917318ea46cea\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/IProtocolFees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Currency} from \\\"../types/Currency.sol\\\";\\nimport {PoolId} from \\\"../types/PoolId.sol\\\";\\nimport {PoolKey} from \\\"../types/PoolKey.sol\\\";\\n\\n/// @notice Interface for all protocol-fee related functions in the pool manager\\ninterface IProtocolFees {\\n    /// @notice Thrown when protocol fee is set too high\\n    error ProtocolFeeTooLarge(uint24 fee);\\n\\n    /// @notice Thrown when collectProtocolFees or setProtocolFee is not called by the controller.\\n    error InvalidCaller();\\n\\n    /// @notice Thrown when collectProtocolFees is attempted on a token that is synced.\\n    error ProtocolFeeCurrencySynced();\\n\\n    /// @notice Emitted when the protocol fee controller address is updated in setProtocolFeeController.\\n    event ProtocolFeeControllerUpdated(address indexed protocolFeeController);\\n\\n    /// @notice Emitted when the protocol fee is updated for a pool.\\n    event ProtocolFeeUpdated(PoolId indexed id, uint24 protocolFee);\\n\\n    /// @notice Given a currency address, returns the protocol fees accrued in that currency\\n    /// @param currency The currency to check\\n    /// @return amount The amount of protocol fees accrued in the currency\\n    function protocolFeesAccrued(Currency currency) external view returns (uint256 amount);\\n\\n    /// @notice Sets the protocol fee for the given pool\\n    /// @param key The key of the pool to set a protocol fee for\\n    /// @param newProtocolFee The fee to set\\n    function setProtocolFee(PoolKey memory key, uint24 newProtocolFee) external;\\n\\n    /// @notice Sets the protocol fee controller\\n    /// @param controller The new protocol fee controller\\n    function setProtocolFeeController(address controller) external;\\n\\n    /// @notice Collects the protocol fees for a given recipient and currency, returning the amount collected\\n    /// @dev This will revert if the contract is unlocked\\n    /// @param recipient The address to receive the protocol fees\\n    /// @param currency The currency to withdraw\\n    /// @param amount The amount of currency to withdraw\\n    /// @return amountCollected The amount of currency successfully withdrawn\\n    function collectProtocolFees(address recipient, Currency currency, uint256 amount)\\n        external\\n        returns (uint256 amountCollected);\\n\\n    /// @notice Returns the current protocol fee controller address\\n    /// @return address The current protocol fee controller address\\n    function protocolFeeController() external view returns (address);\\n}\\n\",\"keccak256\":\"0x32a666e588a2f66334430357bb1e2424fe7eebeb98a3364b1dd16eb6ccca9848\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/external/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n    /// @notice Returns an account's balance in the token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xeccadf1bf69ba2eb51f2fe4fa511bc7bb05bbd6b9f9a3cb8e5d83d9582613e0f\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/interfaces/external/IERC6909Claims.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface for claims over a contract balance, wrapped as a ERC6909\\ninterface IERC6909Claims {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OperatorSet(address indexed owner, address indexed operator, bool approved);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id, uint256 amount);\\n\\n    event Transfer(address caller, address indexed from, address indexed to, uint256 indexed id, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Owner balance of an id.\\n    /// @param owner The address of the owner.\\n    /// @param id The id of the token.\\n    /// @return amount The balance of the token.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 amount);\\n\\n    /// @notice Spender allowance of an id.\\n    /// @param owner The address of the owner.\\n    /// @param spender The address of the spender.\\n    /// @param id The id of the token.\\n    /// @return amount The allowance of the token.\\n    function allowance(address owner, address spender, uint256 id) external view returns (uint256 amount);\\n\\n    /// @notice Checks if a spender is approved by an owner as an operator\\n    /// @param owner The address of the owner.\\n    /// @param spender The address of the spender.\\n    /// @return approved The approval status.\\n    function isOperator(address owner, address spender) external view returns (bool approved);\\n\\n    /// @notice Transfers an amount of an id from the caller to a receiver.\\n    /// @param receiver The address of the receiver.\\n    /// @param id The id of the token.\\n    /// @param amount The amount of the token.\\n    /// @return bool True, always, unless the function reverts\\n    function transfer(address receiver, uint256 id, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers an amount of an id from a sender to a receiver.\\n    /// @param sender The address of the sender.\\n    /// @param receiver The address of the receiver.\\n    /// @param id The id of the token.\\n    /// @param amount The amount of the token.\\n    /// @return bool True, always, unless the function reverts\\n    function transferFrom(address sender, address receiver, uint256 id, uint256 amount) external returns (bool);\\n\\n    /// @notice Approves an amount of an id to a spender.\\n    /// @param spender The address of the spender.\\n    /// @param id The id of the token.\\n    /// @param amount The amount of the token.\\n    /// @return bool True, always\\n    function approve(address spender, uint256 id, uint256 amount) external returns (bool);\\n\\n    /// @notice Sets or removes an operator for the caller.\\n    /// @param operator The address of the operator.\\n    /// @param approved The approval status.\\n    /// @return bool True, always\\n    function setOperator(address operator, bool approved) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa586f345739e52b0488a0fe40b6e375cce67fdd25758408b0efcb5133ad96a48\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\n/// @author Solady (https://github.com/Vectorized/solady/blob/8200a70e8dc2a77ecb074fc2e99a2a0d36547522/src/utils/LibBit.sol)\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            r := or(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0x0706060506020500060203020504000106050205030304010505030400000000))\\n        }\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            // Isolate the least significant bit.\\n            x := and(x, sub(0, x))\\n            // For the upper 3 bits of the result, use a De Bruijn-like lookup.\\n            // Credit to adhusson: https://blog.adhusson.com/cheap-find-first-set-evm/\\n            // forgefmt: disable-next-item\\n            r := shl(5, shr(252, shl(shl(2, shr(250, mul(x,\\n                0xb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff))),\\n                0x8040405543005266443200005020610674053026020000107506200176117077)))\\n            // For the lower 5 bits of the result, use a De Bruijn lookup.\\n            // forgefmt: disable-next-item\\n            r := or(r, byte(and(div(0xd76453e0, shr(r, x)), 0x1f),\\n                0x001f0d1e100c1d070f090b19131c1706010e11080a1a141802121b1503160405))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b9be4f5c4fd3e80cbc9631a65244a2eb2be250b6b7f128a2035080e18aee8d\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/CustomRevert.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Library for reverting with custom errors efficiently\\n/// @notice Contains functions for reverting with custom errors with different argument types efficiently\\n/// @dev To use this library, declare `using CustomRevert for bytes4;` and replace `revert CustomError()` with\\n/// `CustomError.selector.revertWith()`\\n/// @dev The functions may tamper with the free memory pointer but it is fine since the call context is exited immediately\\nlibrary CustomRevert {\\n    /// @dev ERC-7751 error for wrapping bubbled up reverts\\n    error WrappedError(address target, bytes4 selector, bytes reason, bytes details);\\n\\n    /// @dev Reverts with the selector of a custom error in the scratch space\\n    function revertWith(bytes4 selector) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            revert(0, 0x04)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an address argument in the scratch space\\n    function revertWith(bytes4 selector, address addr) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(addr, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an int24 argument in the scratch space\\n    function revertWith(bytes4 selector, int24 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, signextend(2, value))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with a uint160 argument in the scratch space\\n    function revertWith(bytes4 selector, uint160 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two int24 arguments\\n    function revertWith(bytes4 selector, int24 value1, int24 value2) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), signextend(2, value1))\\n            mstore(add(fmp, 0x24), signextend(2, value2))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two uint160 arguments\\n    function revertWith(bytes4 selector, uint160 value1, uint160 value2) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(fmp, 0x24), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two address arguments\\n    function revertWith(bytes4 selector, address value1, address value2) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(fmp, 0x24), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @notice bubble up the revert message returned by a call and revert with a wrapped ERC-7751 error\\n    /// @dev this method can be vulnerable to revert data bombs\\n    function bubbleUpAndRevertWith(\\n        address revertingContract,\\n        bytes4 revertingFunctionSelector,\\n        bytes4 additionalContext\\n    ) internal pure {\\n        bytes4 wrappedErrorSelector = WrappedError.selector;\\n        assembly (\\\"memory-safe\\\") {\\n            // Ensure the size of the revert data is a multiple of 32 bytes\\n            let encodedDataSize := mul(div(add(returndatasize(), 31), 32), 32)\\n\\n            let fmp := mload(0x40)\\n\\n            // Encode wrapped error selector, address, function selector, offset, additional context, size, revert reason\\n            mstore(fmp, wrappedErrorSelector)\\n            mstore(add(fmp, 0x04), and(revertingContract, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(\\n                add(fmp, 0x24),\\n                and(revertingFunctionSelector, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n            )\\n            // offset revert reason\\n            mstore(add(fmp, 0x44), 0x80)\\n            // offset additional context\\n            mstore(add(fmp, 0x64), add(0xa0, encodedDataSize))\\n            // size revert reason\\n            mstore(add(fmp, 0x84), returndatasize())\\n            // revert reason\\n            returndatacopy(add(fmp, 0xa4), 0, returndatasize())\\n            // size additional context\\n            mstore(add(fmp, add(0xa4, encodedDataSize)), 0x04)\\n            // additional context\\n            mstore(\\n                add(fmp, add(0xc4, encodedDataSize)),\\n                and(additionalContext, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n            )\\n            revert(fmp, add(0xe4, encodedDataSize))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x111ed3031b6990c80a93ae35dde6b6ac0b7e6af471388fdd7461e91edda9b7de\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0xad236e10853f4b4b20a35a9bb52b857c4fc79874846b7e444e06ead7f2630542\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0xef5c3fd41aee26bb12aa1c32873cfee88e67eddfe7c2b32283786265ac669741\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0 = a * b; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly (\\\"memory-safe\\\") {\\n                let mm := mulmod(a, b, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                assembly (\\\"memory-safe\\\") {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly (\\\"memory-safe\\\") {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly (\\\"memory-safe\\\") {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly (\\\"memory-safe\\\") {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly (\\\"memory-safe\\\") {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the preconditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(++result > 0);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc73a00817193fd3cac1cc03d8167d21af97d75f1815a070ee31a90c702b4c2\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        assembly (\\\"memory-safe\\\") {\\n            z := add(and(x, 0xffffffffffffffffffffffffffffffff), signextend(15, y))\\n            if shr(128, z) {\\n                // revert SafeCastOverflow()\\n                mstore(0, 0x93dafdf1)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x000ef2eadcc1eb7b2c18a77655f94e76e0e860f605783484657ef65fd6eda353\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {FullMath} from \\\"./FullMath.sol\\\";\\nimport {FixedPoint128} from \\\"./FixedPoint128.sol\\\";\\nimport {LiquidityMath} from \\\"./LiquidityMath.sol\\\";\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @title Position\\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\\n/// @dev Positions store additional state for tracking fees owed to the position\\nlibrary Position {\\n    using CustomRevert for bytes4;\\n\\n    /// @notice Cannot update a position with no liquidity\\n    error CannotUpdateEmptyPosition();\\n\\n    // info stored for each user's position\\n    struct State {\\n        // the amount of liquidity owned by this position\\n        uint128 liquidity;\\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\\n        uint256 feeGrowthInside0LastX128;\\n        uint256 feeGrowthInside1LastX128;\\n    }\\n\\n    /// @notice Returns the State struct of a position, given an owner and position boundaries\\n    /// @param self The mapping containing all user positions\\n    /// @param owner The address of the position owner\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @param salt A unique value to differentiate between multiple positions in the same range\\n    /// @return position The position info struct of the given owners' position\\n    function get(mapping(bytes32 => State) storage self, address owner, int24 tickLower, int24 tickUpper, bytes32 salt)\\n        internal\\n        view\\n        returns (State storage position)\\n    {\\n        bytes32 positionKey = calculatePositionKey(owner, tickLower, tickUpper, salt);\\n        position = self[positionKey];\\n    }\\n\\n    /// @notice A helper function to calculate the position key\\n    /// @param owner The address of the position owner\\n    /// @param tickLower the lower tick boundary of the position\\n    /// @param tickUpper the upper tick boundary of the position\\n    /// @param salt A unique value to differentiate between multiple positions in the same range, by the same owner. Passed in by the caller.\\n    function calculatePositionKey(address owner, int24 tickLower, int24 tickUpper, bytes32 salt)\\n        internal\\n        pure\\n        returns (bytes32 positionKey)\\n    {\\n        // positionKey = keccak256(abi.encodePacked(owner, tickLower, tickUpper, salt))\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(add(fmp, 0x26), salt) // [0x26, 0x46)\\n            mstore(add(fmp, 0x06), tickUpper) // [0x23, 0x26)\\n            mstore(add(fmp, 0x03), tickLower) // [0x20, 0x23)\\n            mstore(fmp, owner) // [0x0c, 0x20)\\n            positionKey := keccak256(add(fmp, 0x0c), 0x3a) // len is 58 bytes\\n\\n            // now clean the memory we used\\n            mstore(add(fmp, 0x40), 0) // fmp+0x40 held salt\\n            mstore(add(fmp, 0x20), 0) // fmp+0x20 held tickLower, tickUpper, salt\\n            mstore(fmp, 0) // fmp held owner\\n        }\\n    }\\n\\n    /// @notice Credits accumulated fees to a user's position\\n    /// @param self The individual position to update\\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\\n    /// @param feeGrowthInside0X128 The all-time fee growth in currency0, per unit of liquidity, inside the position's tick boundaries\\n    /// @param feeGrowthInside1X128 The all-time fee growth in currency1, per unit of liquidity, inside the position's tick boundaries\\n    /// @return feesOwed0 The amount of currency0 owed to the position owner\\n    /// @return feesOwed1 The amount of currency1 owed to the position owner\\n    function update(\\n        State storage self,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthInside0X128,\\n        uint256 feeGrowthInside1X128\\n    ) internal returns (uint256 feesOwed0, uint256 feesOwed1) {\\n        uint128 liquidity = self.liquidity;\\n\\n        if (liquidityDelta == 0) {\\n            // disallow pokes for 0 liquidity positions\\n            if (liquidity == 0) CannotUpdateEmptyPosition.selector.revertWith();\\n        } else {\\n            self.liquidity = LiquidityMath.addDelta(liquidity, liquidityDelta);\\n        }\\n\\n        // calculate accumulated fees. overflow in the subtraction of fee growth is expected\\n        unchecked {\\n            feesOwed0 =\\n                FullMath.mulDiv(feeGrowthInside0X128 - self.feeGrowthInside0LastX128, liquidity, FixedPoint128.Q128);\\n            feesOwed1 =\\n                FullMath.mulDiv(feeGrowthInside1X128 - self.feeGrowthInside1LastX128, liquidity, FixedPoint128.Q128);\\n        }\\n\\n        // update the position\\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\\n    }\\n}\\n\",\"keccak256\":\"0xddab2a831f1befb6abf5567e77c4582169ca8156cf69eb4f22d8e87f7226a3f9\",\"license\":\"BUSL-1.1\"},\"@uniswap/v4-core/src/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    using CustomRevert for bytes4;\\n\\n    error SafeCastOverflow();\\n\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param x The uint256 to be downcasted\\n    /// @return y The downcasted integer, now type uint160\\n    function toUint160(uint256 x) internal pure returns (uint160 y) {\\n        y = uint160(x);\\n        if (y != x) SafeCastOverflow.selector.revertWith();\\n    }\\n\\n    /// @notice Cast a uint256 to a uint128, revert on overflow\\n    /// @param x The uint256 to be downcasted\\n    /// @return y The downcasted integer, now type uint128\\n    function toUint128(uint256 x) internal pure returns (uint128 y) {\\n        y = uint128(x);\\n        if (x != y) SafeCastOverflow.selector.revertWith();\\n    }\\n\\n    /// @notice Cast a int128 to a uint128, revert on overflow or underflow\\n    /// @param x The int128 to be casted\\n    /// @return y The casted integer, now type uint128\\n    function toUint128(int128 x) internal pure returns (uint128 y) {\\n        if (x < 0) SafeCastOverflow.selector.revertWith();\\n        y = uint128(x);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param x The int256 to be downcasted\\n    /// @return y The downcasted integer, now type int128\\n    function toInt128(int256 x) internal pure returns (int128 y) {\\n        y = int128(x);\\n        if (y != x) SafeCastOverflow.selector.revertWith();\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param x The uint256 to be casted\\n    /// @return y The casted integer, now type int256\\n    function toInt256(uint256 x) internal pure returns (int256 y) {\\n        y = int256(x);\\n        if (y < 0) SafeCastOverflow.selector.revertWith();\\n    }\\n\\n    /// @notice Cast a uint256 to a int128, revert on overflow\\n    /// @param x The uint256 to be downcasted\\n    /// @return The downcasted integer, now type int128\\n    function toInt128(uint256 x) internal pure returns (int128) {\\n        if (x >= 1 << 127) SafeCastOverflow.selector.revertWith();\\n        return int128(int256(x));\\n    }\\n}\\n\",\"keccak256\":\"0x42c4a24f996a14d358be397b71f7ec9d7daf666aaec78002c63315a6ee67aa86\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/StateLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PoolId} from \\\"../types/PoolId.sol\\\";\\nimport {IPoolManager} from \\\"../interfaces/IPoolManager.sol\\\";\\nimport {Position} from \\\"./Position.sol\\\";\\n\\n/// @notice A helper library to provide state getters that use extsload\\nlibrary StateLibrary {\\n    /// @notice index of pools mapping in the PoolManager\\n    bytes32 public constant POOLS_SLOT = bytes32(uint256(6));\\n\\n    /// @notice index of feeGrowthGlobal0X128 in Pool.State\\n    uint256 public constant FEE_GROWTH_GLOBAL0_OFFSET = 1;\\n\\n    // feeGrowthGlobal1X128 offset in Pool.State = 2\\n\\n    /// @notice index of liquidity in Pool.State\\n    uint256 public constant LIQUIDITY_OFFSET = 3;\\n\\n    /// @notice index of TicksInfo mapping in Pool.State: mapping(int24 => TickInfo) ticks;\\n    uint256 public constant TICKS_OFFSET = 4;\\n\\n    /// @notice index of tickBitmap mapping in Pool.State\\n    uint256 public constant TICK_BITMAP_OFFSET = 5;\\n\\n    /// @notice index of Position.State mapping in Pool.State: mapping(bytes32 => Position.State) positions;\\n    uint256 public constant POSITIONS_OFFSET = 6;\\n\\n    /**\\n     * @notice Get Slot0 of the pool: sqrtPriceX96, tick, protocolFee, lpFee\\n     * @dev Corresponds to pools[poolId].slot0\\n     * @param manager The pool manager contract.\\n     * @param poolId The ID of the pool.\\n     * @return sqrtPriceX96 The square root of the price of the pool, in Q96 precision.\\n     * @return tick The current tick of the pool.\\n     * @return protocolFee The protocol fee of the pool.\\n     * @return lpFee The swap fee of the pool.\\n     */\\n    function getSlot0(IPoolManager manager, PoolId poolId)\\n        internal\\n        view\\n        returns (uint160 sqrtPriceX96, int24 tick, uint24 protocolFee, uint24 lpFee)\\n    {\\n        // slot key of Pool.State value: `pools[poolId]`\\n        bytes32 stateSlot = _getPoolStateSlot(poolId);\\n\\n        bytes32 data = manager.extsload(stateSlot);\\n\\n        //   24 bits  |24bits|24bits      |24 bits|160 bits\\n        // 0x000000   |000bb8|000000      |ffff75 |0000000000000000fe3aa841ba359daa0ea9eff7\\n        // ---------- | fee  |protocolfee | tick  | sqrtPriceX96\\n        assembly (\\\"memory-safe\\\") {\\n            // bottom 160 bits of data\\n            sqrtPriceX96 := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n            // next 24 bits of data\\n            tick := signextend(2, shr(160, data))\\n            // next 24 bits of data\\n            protocolFee := and(shr(184, data), 0xFFFFFF)\\n            // last 24 bits of data\\n            lpFee := and(shr(208, data), 0xFFFFFF)\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the tick information of a pool at a specific tick.\\n     * @dev Corresponds to pools[poolId].ticks[tick]\\n     * @param manager The pool manager contract.\\n     * @param poolId The ID of the pool.\\n     * @param tick The tick to retrieve information for.\\n     * @return liquidityGross The total position liquidity that references this tick\\n     * @return liquidityNet The amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left)\\n     * @return feeGrowthOutside0X128 fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n     * @return feeGrowthOutside1X128 fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n     */\\n    function getTickInfo(IPoolManager manager, PoolId poolId, int24 tick)\\n        internal\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128\\n        )\\n    {\\n        bytes32 slot = _getTickInfoSlot(poolId, tick);\\n\\n        // read all 3 words of the TickInfo struct\\n        bytes32[] memory data = manager.extsload(slot, 3);\\n        assembly (\\\"memory-safe\\\") {\\n            let firstWord := mload(add(data, 32))\\n            liquidityNet := sar(128, firstWord)\\n            liquidityGross := and(firstWord, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n            feeGrowthOutside0X128 := mload(add(data, 64))\\n            feeGrowthOutside1X128 := mload(add(data, 96))\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the liquidity information of a pool at a specific tick.\\n     * @dev Corresponds to pools[poolId].ticks[tick].liquidityGross and pools[poolId].ticks[tick].liquidityNet. A more gas efficient version of getTickInfo\\n     * @param manager The pool manager contract.\\n     * @param poolId The ID of the pool.\\n     * @param tick The tick to retrieve liquidity for.\\n     * @return liquidityGross The total position liquidity that references this tick\\n     * @return liquidityNet The amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left)\\n     */\\n    function getTickLiquidity(IPoolManager manager, PoolId poolId, int24 tick)\\n        internal\\n        view\\n        returns (uint128 liquidityGross, int128 liquidityNet)\\n    {\\n        bytes32 slot = _getTickInfoSlot(poolId, tick);\\n\\n        bytes32 value = manager.extsload(slot);\\n        assembly (\\\"memory-safe\\\") {\\n            liquidityNet := sar(128, value)\\n            liquidityGross := and(value, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the fee growth outside a tick range of a pool\\n     * @dev Corresponds to pools[poolId].ticks[tick].feeGrowthOutside0X128 and pools[poolId].ticks[tick].feeGrowthOutside1X128. A more gas efficient version of getTickInfo\\n     * @param manager The pool manager contract.\\n     * @param poolId The ID of the pool.\\n     * @param tick The tick to retrieve fee growth for.\\n     * @return feeGrowthOutside0X128 fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n     * @return feeGrowthOutside1X128 fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n     */\\n    function getTickFeeGrowthOutside(IPoolManager manager, PoolId poolId, int24 tick)\\n        internal\\n        view\\n        returns (uint256 feeGrowthOutside0X128, uint256 feeGrowthOutside1X128)\\n    {\\n        bytes32 slot = _getTickInfoSlot(poolId, tick);\\n\\n        // offset by 1 word, since the first word is liquidityGross + liquidityNet\\n        bytes32[] memory data = manager.extsload(bytes32(uint256(slot) + 1), 2);\\n        assembly (\\\"memory-safe\\\") {\\n            feeGrowthOutside0X128 := mload(add(data, 32))\\n            feeGrowthOutside1X128 := mload(add(data, 64))\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the global fee growth of a pool.\\n     * @dev Corresponds to pools[poolId].feeGrowthGlobal0X128 and pools[poolId].feeGrowthGlobal1X128\\n     * @param manager The pool manager contract.\\n     * @param poolId The ID of the pool.\\n     * @return feeGrowthGlobal0 The global fee growth for token0.\\n     * @return feeGrowthGlobal1 The global fee growth for token1.\\n     * @dev Note that feeGrowthGlobal can be artificially inflated\\n     * For pools with a single liquidity position, actors can donate to themselves to freely inflate feeGrowthGlobal\\n     * atomically donating and collecting fees in the same unlockCallback may make the inflated value more extreme\\n     */\\n    function getFeeGrowthGlobals(IPoolManager manager, PoolId poolId)\\n        internal\\n        view\\n        returns (uint256 feeGrowthGlobal0, uint256 feeGrowthGlobal1)\\n    {\\n        // slot key of Pool.State value: `pools[poolId]`\\n        bytes32 stateSlot = _getPoolStateSlot(poolId);\\n\\n        // Pool.State, `uint256 feeGrowthGlobal0X128`\\n        bytes32 slot_feeGrowthGlobal0X128 = bytes32(uint256(stateSlot) + FEE_GROWTH_GLOBAL0_OFFSET);\\n\\n        // read the 2 words of feeGrowthGlobal\\n        bytes32[] memory data = manager.extsload(slot_feeGrowthGlobal0X128, 2);\\n        assembly (\\\"memory-safe\\\") {\\n            feeGrowthGlobal0 := mload(add(data, 32))\\n            feeGrowthGlobal1 := mload(add(data, 64))\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves total the liquidity of a pool.\\n     * @dev Corresponds to pools[poolId].liquidity\\n     * @param manager The pool manager contract.\\n     * @param poolId The ID of the pool.\\n     * @return liquidity The liquidity of the pool.\\n     */\\n    function getLiquidity(IPoolManager manager, PoolId poolId) internal view returns (uint128 liquidity) {\\n        // slot key of Pool.State value: `pools[poolId]`\\n        bytes32 stateSlot = _getPoolStateSlot(poolId);\\n\\n        // Pool.State: `uint128 liquidity`\\n        bytes32 slot = bytes32(uint256(stateSlot) + LIQUIDITY_OFFSET);\\n\\n        liquidity = uint128(uint256(manager.extsload(slot)));\\n    }\\n\\n    /**\\n     * @notice Retrieves the tick bitmap of a pool at a specific tick.\\n     * @dev Corresponds to pools[poolId].tickBitmap[tick]\\n     * @param manager The pool manager contract.\\n     * @param poolId The ID of the pool.\\n     * @param tick The tick to retrieve the bitmap for.\\n     * @return tickBitmap The bitmap of the tick.\\n     */\\n    function getTickBitmap(IPoolManager manager, PoolId poolId, int16 tick)\\n        internal\\n        view\\n        returns (uint256 tickBitmap)\\n    {\\n        // slot key of Pool.State value: `pools[poolId]`\\n        bytes32 stateSlot = _getPoolStateSlot(poolId);\\n\\n        // Pool.State: `mapping(int16 => uint256) tickBitmap;`\\n        bytes32 tickBitmapMapping = bytes32(uint256(stateSlot) + TICK_BITMAP_OFFSET);\\n\\n        // slot id of the mapping key: `pools[poolId].tickBitmap[tick]\\n        bytes32 slot = keccak256(abi.encodePacked(int256(tick), tickBitmapMapping));\\n\\n        tickBitmap = uint256(manager.extsload(slot));\\n    }\\n\\n    /**\\n     * @notice Retrieves the position information of a pool without needing to calculate the `positionId`.\\n     * @dev Corresponds to pools[poolId].positions[positionId]\\n     * @param poolId The ID of the pool.\\n     * @param owner The owner of the liquidity position.\\n     * @param tickLower The lower tick of the liquidity range.\\n     * @param tickUpper The upper tick of the liquidity range.\\n     * @param salt The bytes32 randomness to further distinguish position state.\\n     * @return liquidity The liquidity of the position.\\n     * @return feeGrowthInside0LastX128 The fee growth inside the position for token0.\\n     * @return feeGrowthInside1LastX128 The fee growth inside the position for token1.\\n     */\\n    function getPositionInfo(\\n        IPoolManager manager,\\n        PoolId poolId,\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        bytes32 salt\\n    ) internal view returns (uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128) {\\n        // positionKey = keccak256(abi.encodePacked(owner, tickLower, tickUpper, salt))\\n        bytes32 positionKey = Position.calculatePositionKey(owner, tickLower, tickUpper, salt);\\n\\n        (liquidity, feeGrowthInside0LastX128, feeGrowthInside1LastX128) = getPositionInfo(manager, poolId, positionKey);\\n    }\\n\\n    /**\\n     * @notice Retrieves the position information of a pool at a specific position ID.\\n     * @dev Corresponds to pools[poolId].positions[positionId]\\n     * @param manager The pool manager contract.\\n     * @param poolId The ID of the pool.\\n     * @param positionId The ID of the position.\\n     * @return liquidity The liquidity of the position.\\n     * @return feeGrowthInside0LastX128 The fee growth inside the position for token0.\\n     * @return feeGrowthInside1LastX128 The fee growth inside the position for token1.\\n     */\\n    function getPositionInfo(IPoolManager manager, PoolId poolId, bytes32 positionId)\\n        internal\\n        view\\n        returns (uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128)\\n    {\\n        bytes32 slot = _getPositionInfoSlot(poolId, positionId);\\n\\n        // read all 3 words of the Position.State struct\\n        bytes32[] memory data = manager.extsload(slot, 3);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            liquidity := mload(add(data, 32))\\n            feeGrowthInside0LastX128 := mload(add(data, 64))\\n            feeGrowthInside1LastX128 := mload(add(data, 96))\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the liquidity of a position.\\n     * @dev Corresponds to pools[poolId].positions[positionId].liquidity. More gas efficient for just retrieiving liquidity as compared to getPositionInfo\\n     * @param manager The pool manager contract.\\n     * @param poolId The ID of the pool.\\n     * @param positionId The ID of the position.\\n     * @return liquidity The liquidity of the position.\\n     */\\n    function getPositionLiquidity(IPoolManager manager, PoolId poolId, bytes32 positionId)\\n        internal\\n        view\\n        returns (uint128 liquidity)\\n    {\\n        bytes32 slot = _getPositionInfoSlot(poolId, positionId);\\n        liquidity = uint128(uint256(manager.extsload(slot)));\\n    }\\n\\n    /**\\n     * @notice Calculate the fee growth inside a tick range of a pool\\n     * @dev pools[poolId].feeGrowthInside0LastX128 in Position.State is cached and can become stale. This function will calculate the up to date feeGrowthInside\\n     * @param manager The pool manager contract.\\n     * @param poolId The ID of the pool.\\n     * @param tickLower The lower tick of the range.\\n     * @param tickUpper The upper tick of the range.\\n     * @return feeGrowthInside0X128 The fee growth inside the tick range for token0.\\n     * @return feeGrowthInside1X128 The fee growth inside the tick range for token1.\\n     */\\n    function getFeeGrowthInside(IPoolManager manager, PoolId poolId, int24 tickLower, int24 tickUpper)\\n        internal\\n        view\\n        returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128)\\n    {\\n        (uint256 feeGrowthGlobal0X128, uint256 feeGrowthGlobal1X128) = getFeeGrowthGlobals(manager, poolId);\\n\\n        (uint256 lowerFeeGrowthOutside0X128, uint256 lowerFeeGrowthOutside1X128) =\\n            getTickFeeGrowthOutside(manager, poolId, tickLower);\\n        (uint256 upperFeeGrowthOutside0X128, uint256 upperFeeGrowthOutside1X128) =\\n            getTickFeeGrowthOutside(manager, poolId, tickUpper);\\n        (, int24 tickCurrent,,) = getSlot0(manager, poolId);\\n        unchecked {\\n            if (tickCurrent < tickLower) {\\n                feeGrowthInside0X128 = lowerFeeGrowthOutside0X128 - upperFeeGrowthOutside0X128;\\n                feeGrowthInside1X128 = lowerFeeGrowthOutside1X128 - upperFeeGrowthOutside1X128;\\n            } else if (tickCurrent >= tickUpper) {\\n                feeGrowthInside0X128 = upperFeeGrowthOutside0X128 - lowerFeeGrowthOutside0X128;\\n                feeGrowthInside1X128 = upperFeeGrowthOutside1X128 - lowerFeeGrowthOutside1X128;\\n            } else {\\n                feeGrowthInside0X128 = feeGrowthGlobal0X128 - lowerFeeGrowthOutside0X128 - upperFeeGrowthOutside0X128;\\n                feeGrowthInside1X128 = feeGrowthGlobal1X128 - lowerFeeGrowthOutside1X128 - upperFeeGrowthOutside1X128;\\n            }\\n        }\\n    }\\n\\n    function _getPoolStateSlot(PoolId poolId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PoolId.unwrap(poolId), POOLS_SLOT));\\n    }\\n\\n    function _getTickInfoSlot(PoolId poolId, int24 tick) internal pure returns (bytes32) {\\n        // slot key of Pool.State value: `pools[poolId]`\\n        bytes32 stateSlot = _getPoolStateSlot(poolId);\\n\\n        // Pool.State: `mapping(int24 => TickInfo) ticks`\\n        bytes32 ticksMappingSlot = bytes32(uint256(stateSlot) + TICKS_OFFSET);\\n\\n        // slot key of the tick key: `pools[poolId].ticks[tick]\\n        return keccak256(abi.encodePacked(int256(tick), ticksMappingSlot));\\n    }\\n\\n    function _getPositionInfoSlot(PoolId poolId, bytes32 positionId) internal pure returns (bytes32) {\\n        // slot key of Pool.State value: `pools[poolId]`\\n        bytes32 stateSlot = _getPoolStateSlot(poolId);\\n\\n        // Pool.State: `mapping(bytes32 => Position.State) positions;`\\n        bytes32 positionMapping = bytes32(uint256(stateSlot) + POSITIONS_OFFSET);\\n\\n        // slot of the mapping key: `pools[poolId].positions[positionId]\\n        return keccak256(abi.encodePacked(positionId, positionMapping));\\n    }\\n}\\n\",\"keccak256\":\"0x96db333ee126a841dd959e38e452cc59d73583cb0437a1d48b2052e33a74f952\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    using CustomRevert for bytes4;\\n\\n    /// @notice Thrown when the tick passed to #getSqrtPriceAtTick is not between MIN_TICK and MAX_TICK\\n    error InvalidTick(int24 tick);\\n    /// @notice Thrown when the price passed to #getTickAtSqrtPrice does not correspond to a price between MIN_TICK and MAX_TICK\\n    error InvalidSqrtPrice(uint160 sqrtPriceX96);\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**-128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MAX_TICK = 887272;\\n\\n    /// @dev The minimum tick spacing value drawn from the range of type int16 that is greater than 0, i.e. min from the range [1, 32767]\\n    int24 internal constant MIN_TICK_SPACING = 1;\\n    /// @dev The maximum tick spacing value drawn from the range of type int16, i.e. max from the range [1, 32767]\\n    int24 internal constant MAX_TICK_SPACING = type(int16).max;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_PRICE = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_PRICE = 1461446703485210103287273052203988822378723970342;\\n    /// @dev A threshold used for optimized bounds check, equals `MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1`\\n    uint160 internal constant MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE =\\n        1461446703485210103287273052203988822378723970342 - 4295128739 - 1;\\n\\n    /// @notice Given a tickSpacing, compute the maximum usable tick\\n    function maxUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MAX_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Given a tickSpacing, compute the minimum usable tick\\n    function minUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MIN_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the price of the two assets (currency1/currency0)\\n    /// at the given tick\\n    function getSqrtPriceAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick;\\n            assembly (\\\"memory-safe\\\") {\\n                tick := signextend(2, tick)\\n                // mask = 0 if tick >= 0 else -1 (all 1s)\\n                let mask := sar(255, tick)\\n                // if tick >= 0, |tick| = tick = 0 ^ tick\\n                // if tick < 0, |tick| = ~~|tick| = ~(-|tick| - 1) = ~(tick - 1) = (-1) ^ (tick - 1)\\n                // either way, |tick| = mask ^ (tick + mask)\\n                absTick := xor(mask, add(mask, tick))\\n            }\\n\\n            if (absTick > uint256(int256(MAX_TICK))) InvalidTick.selector.revertWith(tick);\\n\\n            // The tick is decomposed into bits, and for each bit with index i that is set, the product of 1/sqrt(1.0001^(2^i))\\n            // is calculated (using Q128.128). The constants used for this calculation are rounded to the nearest integer\\n\\n            // Equivalent to:\\n            //     price = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            //     or price = int(2**128 / sqrt(1.0001)) if (absTick & 0x1) else 1 << 128\\n            uint256 price;\\n            assembly (\\\"memory-safe\\\") {\\n                price := xor(shl(128, 1), mul(xor(shl(128, 1), 0xfffcb933bd6fad37aa2d162d1a594001), and(absTick, 0x1)))\\n            }\\n            if (absTick & 0x2 != 0) price = (price * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) price = (price * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) price = (price * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) price = (price * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) price = (price * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) price = (price * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) price = (price * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) price = (price * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) price = (price * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) price = (price * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) price = (price * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) price = (price * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) price = (price * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) price = (price * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) price = (price * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) price = (price * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) price = (price * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) price = (price * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) price = (price * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                // if (tick > 0) price = type(uint256).max / price;\\n                if sgt(tick, 0) { price := div(not(0), price) }\\n\\n                // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n                // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n                // we round up in the division so getTickAtSqrtPrice of the output price is always consistent\\n                // `sub(shl(32, 1), 1)` is `type(uint32).max`\\n                // `price + type(uint32).max` will not overflow because `price` fits in 192 bits\\n                sqrtPriceX96 := shr(32, add(price, sub(shl(32, 1), 1)))\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getSqrtPriceAtTick(tick) <= sqrtPriceX96\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_PRICE, as MIN_SQRT_PRICE is the lowest value getSqrtPriceAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt price for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the getSqrtPriceAtTick(tick) is less than or equal to the input sqrtPriceX96\\n    function getTickAtSqrtPrice(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {\\n            // Equivalent: if (sqrtPriceX96 < MIN_SQRT_PRICE || sqrtPriceX96 >= MAX_SQRT_PRICE) revert InvalidSqrtPrice();\\n            // second inequality must be >= because the price can never reach the price at the max tick\\n            // if sqrtPriceX96 < MIN_SQRT_PRICE, the `sub` underflows and `gt` is true\\n            // if sqrtPriceX96 >= MAX_SQRT_PRICE, sqrtPriceX96 - MIN_SQRT_PRICE > MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1\\n            if ((sqrtPriceX96 - MIN_SQRT_PRICE) > MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE) {\\n                InvalidSqrtPrice.selector.revertWith(sqrtPriceX96);\\n            }\\n\\n            uint256 price = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = price;\\n            uint256 msb = BitMath.mostSignificantBit(r);\\n\\n            if (msb >= 128) r = price >> (msb - 127);\\n            else r = price << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // Q22.128 number\\n\\n            // Magic number represents the ceiling of the maximum value of the error when approximating log_sqrt10001(x)\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n\\n            // Magic number represents the minimum value of the error when approximating log_sqrt10001(x), when\\n            // sqrtPrice is from the range (2^-64, 2^64). This is safe as MIN_SQRT_PRICE is more than 2^-64. If MIN_SQRT_PRICE\\n            // is changed, this may need to be changed too\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtPriceAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e1a11e154eb06106cb1c4598f06cca5f5ca16eaa33494ba2f0e74981123eca8\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/types/BalanceDelta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {SafeCast} from \\\"../libraries/SafeCast.sol\\\";\\n\\n/// @dev Two `int128` values packed into a single `int256` where the upper 128 bits represent the amount0\\n/// and the lower 128 bits represent the amount1.\\ntype BalanceDelta is int256;\\n\\nusing {add as +, sub as -, eq as ==, neq as !=} for BalanceDelta global;\\nusing BalanceDeltaLibrary for BalanceDelta global;\\nusing SafeCast for int256;\\n\\nfunction toBalanceDelta(int128 _amount0, int128 _amount1) pure returns (BalanceDelta balanceDelta) {\\n    assembly (\\\"memory-safe\\\") {\\n        balanceDelta := or(shl(128, _amount0), and(sub(shl(128, 1), 1), _amount1))\\n    }\\n}\\n\\nfunction add(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {\\n    int256 res0;\\n    int256 res1;\\n    assembly (\\\"memory-safe\\\") {\\n        let a0 := sar(128, a)\\n        let a1 := signextend(15, a)\\n        let b0 := sar(128, b)\\n        let b1 := signextend(15, b)\\n        res0 := add(a0, b0)\\n        res1 := add(a1, b1)\\n    }\\n    return toBalanceDelta(res0.toInt128(), res1.toInt128());\\n}\\n\\nfunction sub(BalanceDelta a, BalanceDelta b) pure returns (BalanceDelta) {\\n    int256 res0;\\n    int256 res1;\\n    assembly (\\\"memory-safe\\\") {\\n        let a0 := sar(128, a)\\n        let a1 := signextend(15, a)\\n        let b0 := sar(128, b)\\n        let b1 := signextend(15, b)\\n        res0 := sub(a0, b0)\\n        res1 := sub(a1, b1)\\n    }\\n    return toBalanceDelta(res0.toInt128(), res1.toInt128());\\n}\\n\\nfunction eq(BalanceDelta a, BalanceDelta b) pure returns (bool) {\\n    return BalanceDelta.unwrap(a) == BalanceDelta.unwrap(b);\\n}\\n\\nfunction neq(BalanceDelta a, BalanceDelta b) pure returns (bool) {\\n    return BalanceDelta.unwrap(a) != BalanceDelta.unwrap(b);\\n}\\n\\n/// @notice Library for getting the amount0 and amount1 deltas from the BalanceDelta type\\nlibrary BalanceDeltaLibrary {\\n    /// @notice A BalanceDelta of 0\\n    BalanceDelta public constant ZERO_DELTA = BalanceDelta.wrap(0);\\n\\n    function amount0(BalanceDelta balanceDelta) internal pure returns (int128 _amount0) {\\n        assembly (\\\"memory-safe\\\") {\\n            _amount0 := sar(128, balanceDelta)\\n        }\\n    }\\n\\n    function amount1(BalanceDelta balanceDelta) internal pure returns (int128 _amount1) {\\n        assembly (\\\"memory-safe\\\") {\\n            _amount1 := signextend(15, balanceDelta)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa719c8fe51e0a9524280178f19f6851bcc3b3b60e73618f3d60905d35ae5569f\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/types/BeforeSwapDelta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Return type of the beforeSwap hook.\\n// Upper 128 bits is the delta in specified tokens. Lower 128 bits is delta in unspecified tokens (to match the afterSwap hook)\\ntype BeforeSwapDelta is int256;\\n\\n// Creates a BeforeSwapDelta from specified and unspecified\\nfunction toBeforeSwapDelta(int128 deltaSpecified, int128 deltaUnspecified)\\n    pure\\n    returns (BeforeSwapDelta beforeSwapDelta)\\n{\\n    assembly (\\\"memory-safe\\\") {\\n        beforeSwapDelta := or(shl(128, deltaSpecified), and(sub(shl(128, 1), 1), deltaUnspecified))\\n    }\\n}\\n\\n/// @notice Library for getting the specified and unspecified deltas from the BeforeSwapDelta type\\nlibrary BeforeSwapDeltaLibrary {\\n    /// @notice A BeforeSwapDelta of 0\\n    BeforeSwapDelta public constant ZERO_DELTA = BeforeSwapDelta.wrap(0);\\n\\n    /// extracts int128 from the upper 128 bits of the BeforeSwapDelta\\n    /// returned by beforeSwap\\n    function getSpecifiedDelta(BeforeSwapDelta delta) internal pure returns (int128 deltaSpecified) {\\n        assembly (\\\"memory-safe\\\") {\\n            deltaSpecified := sar(128, delta)\\n        }\\n    }\\n\\n    /// extracts int128 from the lower 128 bits of the BeforeSwapDelta\\n    /// returned by beforeSwap and afterSwap\\n    function getUnspecifiedDelta(BeforeSwapDelta delta) internal pure returns (int128 deltaUnspecified) {\\n        assembly (\\\"memory-safe\\\") {\\n            deltaUnspecified := signextend(15, delta)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a774312d91285313d569da1a718c909655da5432310417692097a1d4dc83a78\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/types/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Minimal} from \\\"../interfaces/external/IERC20Minimal.sol\\\";\\nimport {CustomRevert} from \\\"../libraries/CustomRevert.sol\\\";\\n\\ntype Currency is address;\\n\\nusing {greaterThan as >, lessThan as <, greaterThanOrEqualTo as >=, equals as ==} for Currency global;\\nusing CurrencyLibrary for Currency global;\\n\\nfunction equals(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) == Currency.unwrap(other);\\n}\\n\\nfunction greaterThan(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) > Currency.unwrap(other);\\n}\\n\\nfunction lessThan(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) < Currency.unwrap(other);\\n}\\n\\nfunction greaterThanOrEqualTo(Currency currency, Currency other) pure returns (bool) {\\n    return Currency.unwrap(currency) >= Currency.unwrap(other);\\n}\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    /// @notice Additional context for ERC-7751 wrapped error when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Additional context for ERC-7751 wrapped error when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    /// @notice A constant to represent the native currency\\n    Currency public constant ADDRESS_ZERO = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // altered from https://github.com/transmissions11/solmate/blob/44a9963d4c78111f77caa0e65d677b8b46d6f2e6/src/utils/SafeTransferLib.sol\\n        // modified custom error selectors\\n\\n        bool success;\\n        if (currency.isAddressZero()) {\\n            assembly (\\\"memory-safe\\\") {\\n                // Transfer the ETH and revert if it fails.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n            // revert with NativeTransferFailed, containing the bubbled up error as an argument\\n            if (!success) {\\n                CustomRevert.bubbleUpAndRevertWith(to, bytes4(0), NativeTransferFailed.selector);\\n            }\\n        } else {\\n            assembly (\\\"memory-safe\\\") {\\n                // Get a pointer to some free memory.\\n                let fmp := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(fmp, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(fmp, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(fmp, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, fmp, 68, 0, 32)\\n                    )\\n\\n                // Now clean the memory we used\\n                mstore(fmp, 0) // 4 byte `selector` and 28 bytes of `to` were stored here\\n                mstore(add(fmp, 0x20), 0) // 4 bytes of `to` and 28 bytes of `amount` were stored here\\n                mstore(add(fmp, 0x40), 0) // 4 bytes of `amount` were stored here\\n            }\\n            // revert with ERC20TransferFailed, containing the bubbled up error as an argument\\n            if (!success) {\\n                CustomRevert.bubbleUpAndRevertWith(\\n                    Currency.unwrap(currency), IERC20Minimal.transfer.selector, ERC20TransferFailed.selector\\n                );\\n            }\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isAddressZero()) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20Minimal(Currency.unwrap(currency)).balanceOf(address(this));\\n        }\\n    }\\n\\n    function balanceOf(Currency currency, address owner) internal view returns (uint256) {\\n        if (currency.isAddressZero()) {\\n            return owner.balance;\\n        } else {\\n            return IERC20Minimal(Currency.unwrap(currency)).balanceOf(owner);\\n        }\\n    }\\n\\n    function isAddressZero(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(ADDRESS_ZERO);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    // If the upper 12 bytes are non-zero, they will be zero-ed out\\n    // Therefore, fromId() and toId() are not inverses of each other\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0x4a0b84b282577ff6f8acf13ec9f4d32dbb9348748b49611d00e68bee96609c93\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/types/PoolId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PoolKey} from \\\"./PoolKey.sol\\\";\\n\\ntype PoolId is bytes32;\\n\\n/// @notice Library for computing the ID of a pool\\nlibrary PoolIdLibrary {\\n    /// @notice Returns value equal to keccak256(abi.encode(poolKey))\\n    function toId(PoolKey memory poolKey) internal pure returns (PoolId poolId) {\\n        assembly (\\\"memory-safe\\\") {\\n            // 0xa0 represents the total size of the poolKey struct (5 slots of 32 bytes)\\n            poolId := keccak256(poolKey, 0xa0)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x308311916ea0f5c2fd878b6a2751eb223d170a69e33f601fae56dfe3c5d392af\",\"license\":\"MIT\"},\"@uniswap/v4-core/src/types/PoolKey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Currency} from \\\"./Currency.sol\\\";\\nimport {IHooks} from \\\"../interfaces/IHooks.sol\\\";\\nimport {PoolIdLibrary} from \\\"./PoolId.sol\\\";\\n\\nusing PoolIdLibrary for PoolKey global;\\n\\n/// @notice Returns the key for identifying a pool\\nstruct PoolKey {\\n    /// @notice The lower currency of the pool, sorted numerically\\n    Currency currency0;\\n    /// @notice The higher currency of the pool, sorted numerically\\n    Currency currency1;\\n    /// @notice The pool LP fee, capped at 1_000_000. If the highest bit is 1, the pool has a dynamic fee and must be exactly equal to 0x800000\\n    uint24 fee;\\n    /// @notice Ticks that involve positions must be a multiple of tick spacing\\n    int24 tickSpacing;\\n    /// @notice The hooks of the pool\\n    IHooks hooks;\\n}\\n\",\"keccak256\":\"0xf89856e0580d7a4856d3187a76858377ccee9d59702d230c338d84388221b786\",\"license\":\"MIT\"},\"@uniswap/v4-periphery/src/libraries/Actions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Library to define different pool actions.\\n/// @dev These are suggested common commands, however additional commands should be defined as required\\n/// Some of these actions are not supported in the Router contracts or Position Manager contracts, but are left as they may be helpful commands for other peripheral contracts.\\nlibrary Actions {\\n    // pool actions\\n    // liquidity actions\\n    uint256 internal constant INCREASE_LIQUIDITY = 0x00;\\n    uint256 internal constant DECREASE_LIQUIDITY = 0x01;\\n    uint256 internal constant MINT_POSITION = 0x02;\\n    uint256 internal constant BURN_POSITION = 0x03;\\n    uint256 internal constant INCREASE_LIQUIDITY_FROM_DELTAS = 0x04;\\n    uint256 internal constant MINT_POSITION_FROM_DELTAS = 0x05;\\n\\n    // swapping\\n    uint256 internal constant SWAP_EXACT_IN_SINGLE = 0x06;\\n    uint256 internal constant SWAP_EXACT_IN = 0x07;\\n    uint256 internal constant SWAP_EXACT_OUT_SINGLE = 0x08;\\n    uint256 internal constant SWAP_EXACT_OUT = 0x09;\\n\\n    // donate\\n    // note this is not supported in the position manager or router\\n    uint256 internal constant DONATE = 0x0a;\\n\\n    // closing deltas on the pool manager\\n    // settling\\n    uint256 internal constant SETTLE = 0x0b;\\n    uint256 internal constant SETTLE_ALL = 0x0c;\\n    uint256 internal constant SETTLE_PAIR = 0x0d;\\n    // taking\\n    uint256 internal constant TAKE = 0x0e;\\n    uint256 internal constant TAKE_ALL = 0x0f;\\n    uint256 internal constant TAKE_PORTION = 0x10;\\n    uint256 internal constant TAKE_PAIR = 0x11;\\n\\n    uint256 internal constant CLOSE_CURRENCY = 0x12;\\n    uint256 internal constant CLEAR_OR_TAKE = 0x13;\\n    uint256 internal constant SWEEP = 0x14;\\n\\n    uint256 internal constant WRAP = 0x15;\\n    uint256 internal constant UNWRAP = 0x16;\\n\\n    // minting/burning 6909s to close deltas\\n    // note this is not supported in the position manager or router\\n    uint256 internal constant MINT_6909 = 0x17;\\n    uint256 internal constant BURN_6909 = 0x18;\\n}\\n\",\"keccak256\":\"0x8efd4b8b289177ee27e557d9d0a5a9f973d66fe1eb1ef8959d316b11987ca830\",\"license\":\"MIT\"},\"@uniswap/v4-periphery/src/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {FullMath} from \\\"@uniswap/v4-core/src/libraries/FullMath.sol\\\";\\nimport {FixedPoint96} from \\\"@uniswap/v4-core/src/libraries/FixedPoint96.sol\\\";\\nimport {SafeCast} from \\\"@uniswap/v4-core/src/libraries/SafeCast.sol\\\";\\n\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    using SafeCast for uint256;\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtPriceAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtPriceBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(uint160 sqrtPriceAX96, uint160 sqrtPriceBX96, uint256 amount0)\\n        internal\\n        pure\\n        returns (uint128 liquidity)\\n    {\\n        unchecked {\\n            if (sqrtPriceAX96 > sqrtPriceBX96) (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n            uint256 intermediate = FullMath.mulDiv(sqrtPriceAX96, sqrtPriceBX96, FixedPoint96.Q96);\\n            return FullMath.mulDiv(amount0, intermediate, sqrtPriceBX96 - sqrtPriceAX96).toUint128();\\n        }\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtPriceAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtPriceBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(uint160 sqrtPriceAX96, uint160 sqrtPriceBX96, uint256 amount1)\\n        internal\\n        pure\\n        returns (uint128 liquidity)\\n    {\\n        unchecked {\\n            if (sqrtPriceAX96 > sqrtPriceBX96) (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n            return FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtPriceBX96 - sqrtPriceAX96).toUint128();\\n        }\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtPriceX96 A sqrt price representing the current pool prices\\n    /// @param sqrtPriceAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtPriceBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtPriceX96,\\n        uint160 sqrtPriceAX96,\\n        uint160 sqrtPriceBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtPriceAX96 > sqrtPriceBX96) (sqrtPriceAX96, sqrtPriceBX96) = (sqrtPriceBX96, sqrtPriceAX96);\\n\\n        if (sqrtPriceX96 <= sqrtPriceAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtPriceAX96, sqrtPriceBX96, amount0);\\n        } else if (sqrtPriceX96 < sqrtPriceBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtPriceX96, sqrtPriceBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtPriceAX96, sqrtPriceX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtPriceAX96, sqrtPriceBX96, amount1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ea74b89831877ffe657f8461164a01a6f3c7e46f415410854fca8d28a8cab53\",\"license\":\"MIT\"},\"contracts/UniswapV4Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {TickMath} from \\\"@uniswap/v4-core/src/libraries/TickMath.sol\\\";\\nimport {IPoolManager} from \\\"@uniswap/v4-core/src/interfaces/IPoolManager.sol\\\";\\nimport {StateLibrary} from \\\"@uniswap/v4-core/src/libraries/StateLibrary.sol\\\";\\nimport {PoolIdLibrary} from \\\"@uniswap/v4-core/src/types/PoolId.sol\\\";\\nimport {PoolKey} from \\\"@uniswap/v4-core/src/types/PoolKey.sol\\\";\\nimport {IHooks} from \\\"@uniswap/v4-core/src/interfaces/IHooks.sol\\\";\\nimport {Currency} from \\\"@uniswap/v4-core/src/types/Currency.sol\\\";\\nimport {LiquidityAmounts} from \\\"@uniswap/v4-periphery/src/libraries/LiquidityAmounts.sol\\\";\\nimport {Actions} from \\\"@uniswap/v4-periphery/src/libraries/Actions.sol\\\";\\n\\nerror ValueExceedsUint160Range();\\n\\ncontract UniswapV4Helpers {\\n    using StateLibrary for IPoolManager;\\n\\n    IPoolManager public immutable poolManager;\\n\\n    constructor(address _poolManager) {\\n        poolManager = IPoolManager(_poolManager);\\n    }\\n\\n    function uint256ToUint128(uint256 input) public pure returns (uint128) {\\n        if (input > type(uint128).max) revert ValueExceedsUint160Range();\\n\\n        return uint128(input);\\n    }\\n\\n    function uint256ToUint160(uint256 input) public pure returns (uint160) {\\n        if (input > type(uint160).max) revert ValueExceedsUint160Range();\\n\\n        return uint160(input);\\n    }\\n\\n    function getPoolKey(\\n        address currency0,\\n        address currency1,\\n        uint24 fee,\\n        int24 tickSpacing,\\n        address hooks\\n    ) public pure returns (PoolKey memory) {\\n        return\\n            PoolKey({\\n                currency0: Currency.wrap(currency0),\\n                currency1: Currency.wrap(currency1),\\n                fee: fee,\\n                tickSpacing: tickSpacing,\\n                hooks: IHooks(hooks)\\n            });\\n    }\\n\\n    function getLiquidityForAmounts(\\n        PoolKey memory poolKey,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) public view returns (uint128) {\\n        (uint160 sqrtPriceX96, , , ) = poolManager.getSlot0(poolKey.toId());\\n\\n        return\\n            LiquidityAmounts.getLiquidityForAmounts(\\n                sqrtPriceX96,\\n                TickMath.getSqrtPriceAtTick(tickLower),\\n                TickMath.getSqrtPriceAtTick(tickUpper),\\n                amount0,\\n                amount1\\n            );\\n    }\\n\\n    function encodeMintWithHooks(\\n        address currency0,\\n        address currency1,\\n        uint24 fee,\\n        int24 tickSpacing,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 liquidity,\\n        uint256 amount0Max,\\n        uint256 amount1Max,\\n        address recipient,\\n        address hooks\\n    ) public pure returns (bytes memory) {\\n        bytes memory actions = abi.encodePacked(uint8(Actions.MINT_POSITION), uint8(Actions.SETTLE_PAIR));\\n\\n        bytes[] memory params = new bytes[](2);\\n\\n        {\\n            params[0] = abi.encode(\\n                getPoolKey(currency0, currency1, fee, tickSpacing, hooks),\\n                tickLower,\\n                tickUpper,\\n                liquidity,\\n                uint256ToUint128(amount0Max),\\n                uint256ToUint128(amount1Max),\\n                recipient,\\n                bytes(\\\"\\\")\\n            );\\n        }\\n        params[1] = abi.encode(currency0, currency1);\\n\\n        return abi.encode(actions, params);\\n    }\\n\\n    function encodeMint(\\n        address currency0,\\n        address currency1,\\n        uint24 fee,\\n        int24 tickSpacing,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 liquidity,\\n        uint256 amount0Max,\\n        uint256 amount1Max,\\n        address recipient\\n    ) external pure returns (bytes memory) {\\n        return\\n            encodeMintWithHooks(\\n                currency0,\\n                currency1,\\n                fee,\\n                tickSpacing,\\n                tickLower,\\n                tickUpper,\\n                liquidity,\\n                amount0Max,\\n                amount1Max,\\n                recipient,\\n                address(0)\\n            );\\n    }\\n\\n    function encodeMintFromDeltasWithHooks(\\n        address currency0,\\n        address currency1,\\n        uint24 fee,\\n        int24 tickSpacing,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 amount0Max,\\n        uint256 amount1Max,\\n        address recipient,\\n        address hooks\\n    ) public view returns (bytes memory) {\\n        uint128 liquidity = getLiquidityForAmounts(\\n            getPoolKey(currency0, currency1, fee, tickSpacing, hooks),\\n            tickLower,\\n            tickUpper,\\n            amount0Max,\\n            amount1Max\\n        );\\n\\n        return\\n            encodeMintWithHooks(\\n                currency0,\\n                currency1,\\n                fee,\\n                tickSpacing,\\n                tickLower,\\n                tickUpper,\\n                liquidity,\\n                amount0Max,\\n                amount1Max,\\n                recipient,\\n                hooks\\n            );\\n    }\\n\\n    function encodeMintFromDeltas(\\n        address currency0,\\n        address currency1,\\n        uint24 fee,\\n        int24 tickSpacing,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 amount0Max,\\n        uint256 amount1Max,\\n        address recipient\\n    ) external view returns (bytes memory) {\\n        return\\n            encodeMintFromDeltasWithHooks(\\n                currency0,\\n                currency1,\\n                fee,\\n                tickSpacing,\\n                tickLower,\\n                tickUpper,\\n                amount0Max,\\n                amount1Max,\\n                recipient,\\n                address(0)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x8e62073fe255791958ca69fb7dd4a918b8391de967b39185375f4a9f0a43096d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161152c38038061152c83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161149a610092600039600081816101ae01526104af015261149a6000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806366a274dc11610076578063a78234511161005b578063a782345114610183578063ac06ac7814610196578063dc4c90d3146101a957600080fd5b806366a274dc1461013c57806398b8f4d51461017057600080fd5b806307d32085146100a857806310513be2146100d157806325544ff6146101095780635eb78d401461011c575b600080fd5b6100bb6100b6366004610db5565b6101d0565b6040516100c89190610ebb565b60405180910390f35b6100e46100df366004610ece565b6101f3565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c8565b6100bb610117366004610ee7565b610247565b61012f61012a366004610fa8565b6103df565b6040516100c89190611015565b61014f61014a366004611078565b610487565b6040516fffffffffffffffffffffffffffffffff90911681526020016100c8565b61014f61017e366004610ece565b610502565b6100bb610191366004611172565b61054e565b6100bb6101a436600461121f565b610573565b6100e47f000000000000000000000000000000000000000000000000000000000000000081565b60606101e58a8a8a8a8a8a8a8a8a6000610573565b9a9950505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff821115610243576040517f8bced22400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5090565b604080517f020000000000000000000000000000000000000000000000000000000000000060208201527f0d00000000000000000000000000000000000000000000000000000000000000602182015281516002818303810182526022830181815260828401909452606093919260009291906042015b60608152602001906001900390816102be5790505090506102e28e8e8e8e886103df565b8a8a8a6102ee8b610502565b6102f78b610502565b604080516020808201835260008252915161031b989796959493928e9291016112c2565b6040516020818303038152906040528160008151811061033d5761033d61138c565b60200260200101819052508d8d60405160200161037d92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6040516020818303038152906040528160018151811061039f5761039f61138c565b602002602001018190525081816040516020016103bd9291906113bb565b604051602081830303815290604052925050509b9a5050505050505050505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040518060a001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018562ffffff1681526020018460020b81526020018373ffffffffffffffffffffffffffffffffffffffff1681525090505b95945050505050565b6000806104d56104988860a0902090565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906105c7565b50505090506104f7816104e7886106b2565b6104f0886106b2565b87876109b1565b979650505050505050565b60006fffffffffffffffffffffffffffffffff821115610243576040517f8bced22400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606105648b8b8b8b8b8b8b8b8b8b6000610247565b9b9a5050505050505050505050565b606060006105906105878d8d8d8d886103df565b89898989610487565b90506105b78c8c8c8c8c8c876fffffffffffffffffffffffffffffffff168d8d8d8d610247565b9c9b505050505050505050505050565b60008060008060006105d886610ad3565b6040517f1e2eaeaf0000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff891690631e2eaeaf90602401602060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d919061144b565b905073ffffffffffffffffffffffffffffffffffffffff811695508060a01c60020b945062ffffff8160b81c16935062ffffff8160d01c169250505092959194509250565b60020b600060ff82901d80830118620d89e88111156106f5576106f57f8b86327a0000000000000000000000000000000000000000000000000000000084610b10565b7001fffcb933bd6fad37aa2d162d1a594001600182160270010000000000000000000000000000000018600282161561073e576ffff97272373d413259a46990580e213a0260801c5b600482161561075d576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561077c576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161561079b576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156107ba576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156107d9576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156107f8576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610818576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610838576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610858576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610878576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610898576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156108b8576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156108d8576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156108f8576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610919576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610939576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610958576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610975576b048a170391f7dc42444e8fa20260801c5b60008413156109a1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff045b63ffffffff0160201c9392505050565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1611156109eb579293925b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1611610a3057610a29858585610b21565b905061047e565b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161015610abe576000610a71878686610b21565b90506000610a80878986610bd9565b9050806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1610610ab35780610ab5565b815b9250505061047e565b610ac9858584610bd9565b9695505050505050565b604051600090610af3908390600690602001918252602082015260400190565b604051602081830303815290604052805190602001209050919050565b816000528060020b60045260246000fd5b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610b5b579192915b6000610ba18573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000610c4e565b9050610bce610bc9848388880373ffffffffffffffffffffffffffffffffffffffff16610c4e565b610d0e565b9150505b9392505050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610c13579192915b610c46610bc9836c0100000000000000000000000087870373ffffffffffffffffffffffffffffffffffffffff16610c4e565b949350505050565b6000838302817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870982811083820303915050808411610c8e57600080fd5b80600003610ca157508290049050610bd2565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b806fffffffffffffffffffffffffffffffff81168114610d5157610d517f93dafdf100000000000000000000000000000000000000000000000000000000610d56565b919050565b8060005260046000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610d8257600080fd5b50565b8035610d5181610d60565b803562ffffff81168114610d5157600080fd5b8035600281900b8114610d5157600080fd5b60008060008060008060008060006101208a8c031215610dd457600080fd5b8935610ddf81610d60565b985060208a0135610def81610d60565b9750610dfd60408b01610d90565b9650610e0b60608b01610da3565b9550610e1960808b01610da3565b9450610e2760a08b01610da3565b935060c08a0135925060e08a013591506101008a0135610e4681610d60565b809150509295985092959850929598565b6000815180845260005b81811015610e7d57602081850181015186830182015201610e61565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610bd26020830184610e57565b600060208284031215610ee057600080fd5b5035919050565b60008060008060008060008060008060006101608c8e031215610f0957600080fd5b8b35610f1481610d60565b9a5060208c0135610f2481610d60565b9950610f3260408d01610d90565b9850610f4060608d01610da3565b9750610f4e60808d01610da3565b9650610f5c60a08d01610da3565b955060c08c0135945060e08c013593506101008c013592506101208c0135610f8381610d60565b91506101408c0135610f9481610d60565b809150509295989b509295989b9093969950565b600080600080600060a08688031215610fc057600080fd5b8535610fcb81610d60565b94506020860135610fdb81610d60565b9350610fe960408701610d90565b9250610ff760608701610da3565b9150608086013561100781610d60565b809150509295509295909350565b60a08101611072828473ffffffffffffffffffffffffffffffffffffffff80825116835280602083015116602084015262ffffff6040830151166040840152606082015160020b6060840152806080830151166080840152505050565b92915050565b600080600080600085870361012081121561109257600080fd5b60a08112156110a057600080fd5b5060405160a0810181811067ffffffffffffffff821117156110eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040526110f787610d85565b815261110560208801610d85565b602082015261111660408801610d90565b604082015261112760608801610da3565b606082015261113860808801610d85565b6080820152945061114b60a08701610da3565b935061115960c08701610da3565b9497939650939460e08101359450610100013592915050565b6000806000806000806000806000806101408b8d03121561119257600080fd5b8a3561119d81610d60565b995060208b01356111ad81610d60565b98506111bb60408c01610d90565b97506111c960608c01610da3565b96506111d760808c01610da3565b95506111e560a08c01610da3565b945060c08b0135935060e08b013592506101008b013591506101208b013561120c81610d60565b809150509295989b9194979a5092959850565b6000806000806000806000806000806101408b8d03121561123f57600080fd5b8a3561124a81610d60565b995060208b013561125a81610d60565b985061126860408c01610d90565b975061127660608c01610da3565b965061128460808c01610da3565b955061129260a08c01610da3565b945060c08b0135935060e08b013592506101008b01356112b181610d60565b91506101208b013561120c81610d60565b6000610180611320838c73ffffffffffffffffffffffffffffffffffffffff80825116835280602083015116602084015262ffffff6040830151166040840152606082015160020b6060840152806080830151166080840152505050565b8960020b60a08401528860020b60c08401528760e08401526fffffffffffffffffffffffffffffffff8088166101008501528087166101208501525073ffffffffffffffffffffffffffffffffffffffff85166101408401528061016084015261056481840185610e57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6040815260006113ce6040830185610e57565b6020838203818501528185518084528284019150828160051b85010183880160005b8381101561143c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe087840301855261142a838351610e57565b948601949250908501906001016113f0565b50909998505050505050505050565b60006020828403121561145d57600080fd5b505191905056fea2646970667358221220a9ddf5e590d8556d0f9b04059386982a18d2cd707b811ad29b612de703810d4764736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c806366a274dc11610076578063a78234511161005b578063a782345114610183578063ac06ac7814610196578063dc4c90d3146101a957600080fd5b806366a274dc1461013c57806398b8f4d51461017057600080fd5b806307d32085146100a857806310513be2146100d157806325544ff6146101095780635eb78d401461011c575b600080fd5b6100bb6100b6366004610db5565b6101d0565b6040516100c89190610ebb565b60405180910390f35b6100e46100df366004610ece565b6101f3565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c8565b6100bb610117366004610ee7565b610247565b61012f61012a366004610fa8565b6103df565b6040516100c89190611015565b61014f61014a366004611078565b610487565b6040516fffffffffffffffffffffffffffffffff90911681526020016100c8565b61014f61017e366004610ece565b610502565b6100bb610191366004611172565b61054e565b6100bb6101a436600461121f565b610573565b6100e47f000000000000000000000000000000000000000000000000000000000000000081565b60606101e58a8a8a8a8a8a8a8a8a6000610573565b9a9950505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff821115610243576040517f8bced22400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5090565b604080517f020000000000000000000000000000000000000000000000000000000000000060208201527f0d00000000000000000000000000000000000000000000000000000000000000602182015281516002818303810182526022830181815260828401909452606093919260009291906042015b60608152602001906001900390816102be5790505090506102e28e8e8e8e886103df565b8a8a8a6102ee8b610502565b6102f78b610502565b604080516020808201835260008252915161031b989796959493928e9291016112c2565b6040516020818303038152906040528160008151811061033d5761033d61138c565b60200260200101819052508d8d60405160200161037d92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6040516020818303038152906040528160018151811061039f5761039f61138c565b602002602001018190525081816040516020016103bd9291906113bb565b604051602081830303815290604052925050509b9a5050505050505050505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040518060a001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018562ffffff1681526020018460020b81526020018373ffffffffffffffffffffffffffffffffffffffff1681525090505b95945050505050565b6000806104d56104988860a0902090565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906105c7565b50505090506104f7816104e7886106b2565b6104f0886106b2565b87876109b1565b979650505050505050565b60006fffffffffffffffffffffffffffffffff821115610243576040517f8bced22400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606105648b8b8b8b8b8b8b8b8b8b6000610247565b9b9a5050505050505050505050565b606060006105906105878d8d8d8d886103df565b89898989610487565b90506105b78c8c8c8c8c8c876fffffffffffffffffffffffffffffffff168d8d8d8d610247565b9c9b505050505050505050505050565b60008060008060006105d886610ad3565b6040517f1e2eaeaf0000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff891690631e2eaeaf90602401602060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d919061144b565b905073ffffffffffffffffffffffffffffffffffffffff811695508060a01c60020b945062ffffff8160b81c16935062ffffff8160d01c169250505092959194509250565b60020b600060ff82901d80830118620d89e88111156106f5576106f57f8b86327a0000000000000000000000000000000000000000000000000000000084610b10565b7001fffcb933bd6fad37aa2d162d1a594001600182160270010000000000000000000000000000000018600282161561073e576ffff97272373d413259a46990580e213a0260801c5b600482161561075d576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561077c576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161561079b576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156107ba576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156107d9576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156107f8576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610818576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610838576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610858576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610878576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610898576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156108b8576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156108d8576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156108f8576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610919576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610939576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610958576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610975576b048a170391f7dc42444e8fa20260801c5b60008413156109a1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff045b63ffffffff0160201c9392505050565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1611156109eb579293925b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1611610a3057610a29858585610b21565b905061047e565b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161015610abe576000610a71878686610b21565b90506000610a80878986610bd9565b9050806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1610610ab35780610ab5565b815b9250505061047e565b610ac9858584610bd9565b9695505050505050565b604051600090610af3908390600690602001918252602082015260400190565b604051602081830303815290604052805190602001209050919050565b816000528060020b60045260246000fd5b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610b5b579192915b6000610ba18573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000610c4e565b9050610bce610bc9848388880373ffffffffffffffffffffffffffffffffffffffff16610c4e565b610d0e565b9150505b9392505050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610c13579192915b610c46610bc9836c0100000000000000000000000087870373ffffffffffffffffffffffffffffffffffffffff16610c4e565b949350505050565b6000838302817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870982811083820303915050808411610c8e57600080fd5b80600003610ca157508290049050610bd2565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b806fffffffffffffffffffffffffffffffff81168114610d5157610d517f93dafdf100000000000000000000000000000000000000000000000000000000610d56565b919050565b8060005260046000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610d8257600080fd5b50565b8035610d5181610d60565b803562ffffff81168114610d5157600080fd5b8035600281900b8114610d5157600080fd5b60008060008060008060008060006101208a8c031215610dd457600080fd5b8935610ddf81610d60565b985060208a0135610def81610d60565b9750610dfd60408b01610d90565b9650610e0b60608b01610da3565b9550610e1960808b01610da3565b9450610e2760a08b01610da3565b935060c08a0135925060e08a013591506101008a0135610e4681610d60565b809150509295985092959850929598565b6000815180845260005b81811015610e7d57602081850181015186830182015201610e61565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610bd26020830184610e57565b600060208284031215610ee057600080fd5b5035919050565b60008060008060008060008060008060006101608c8e031215610f0957600080fd5b8b35610f1481610d60565b9a5060208c0135610f2481610d60565b9950610f3260408d01610d90565b9850610f4060608d01610da3565b9750610f4e60808d01610da3565b9650610f5c60a08d01610da3565b955060c08c0135945060e08c013593506101008c013592506101208c0135610f8381610d60565b91506101408c0135610f9481610d60565b809150509295989b509295989b9093969950565b600080600080600060a08688031215610fc057600080fd5b8535610fcb81610d60565b94506020860135610fdb81610d60565b9350610fe960408701610d90565b9250610ff760608701610da3565b9150608086013561100781610d60565b809150509295509295909350565b60a08101611072828473ffffffffffffffffffffffffffffffffffffffff80825116835280602083015116602084015262ffffff6040830151166040840152606082015160020b6060840152806080830151166080840152505050565b92915050565b600080600080600085870361012081121561109257600080fd5b60a08112156110a057600080fd5b5060405160a0810181811067ffffffffffffffff821117156110eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040526110f787610d85565b815261110560208801610d85565b602082015261111660408801610d90565b604082015261112760608801610da3565b606082015261113860808801610d85565b6080820152945061114b60a08701610da3565b935061115960c08701610da3565b9497939650939460e08101359450610100013592915050565b6000806000806000806000806000806101408b8d03121561119257600080fd5b8a3561119d81610d60565b995060208b01356111ad81610d60565b98506111bb60408c01610d90565b97506111c960608c01610da3565b96506111d760808c01610da3565b95506111e560a08c01610da3565b945060c08b0135935060e08b013592506101008b013591506101208b013561120c81610d60565b809150509295989b9194979a5092959850565b6000806000806000806000806000806101408b8d03121561123f57600080fd5b8a3561124a81610d60565b995060208b013561125a81610d60565b985061126860408c01610d90565b975061127660608c01610da3565b965061128460808c01610da3565b955061129260a08c01610da3565b945060c08b0135935060e08b013592506101008b01356112b181610d60565b91506101208b013561120c81610d60565b6000610180611320838c73ffffffffffffffffffffffffffffffffffffffff80825116835280602083015116602084015262ffffff6040830151166040840152606082015160020b6060840152806080830151166080840152505050565b8960020b60a08401528860020b60c08401528760e08401526fffffffffffffffffffffffffffffffff8088166101008501528087166101208501525073ffffffffffffffffffffffffffffffffffffffff85166101408401528061016084015261056481840185610e57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6040815260006113ce6040830185610e57565b6020838203818501528185518084528284019150828160051b85010183880160005b8381101561143c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe087840301855261142a838351610e57565b948601949250908501906001016113f0565b50909998505050505050505050565b60006020828403121561145d57600080fd5b505191905056fea2646970667358221220a9ddf5e590d8556d0f9b04059386982a18d2cd707b811ad29b612de703810d4764736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}