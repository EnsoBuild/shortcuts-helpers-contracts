{
  "address": "0x8B03378C63710e52786c8669aeaF4bDEA12ca5d4",
  "abi": [
    {
      "inputs": [],
      "name": "UIntOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "divuu",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "x",
          "type": "uint192"
        },
        {
          "internalType": "uint192",
          "name": "y",
          "type": "uint192"
        }
      ],
      "name": "fixMin",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "fullMul",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "hi",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lo",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRToken",
          "name": "rToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "maxIssuableByAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "z",
          "type": "uint256"
        }
      ],
      "name": "mulDiv256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "z",
          "type": "uint256"
        },
        {
          "internalType": "enum RoundingMode",
          "name": "rounding",
          "type": "uint8"
        }
      ],
      "name": "mulDiv256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "safeWrap",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xed59173eac296d3836493ea087d9a44b0199791957b2bd7c96b770c7656faf8a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x826e0BB2276271eFdF2a500597f37b94f6c153bA",
    "contractAddress": null,
    "transactionIndex": 84,
    "gasUsed": "909799",
    "logsBloom": "0x
    "blockHash": "0xf85a6b497698699a618bbe81c3786ddc26172b1364fee4b6894fa7676e471172",
    "transactionHash": "0xed59173eac296d3836493ea087d9a44b0199791957b2bd7c96b770c7656faf8a",
    "logs": [],
    "blockNumber": 19513942,
    "cumulativeGasUsed": "7126990",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f6e7d29cc7ac49f541d4f654ea85fa3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"UIntOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"divuu\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"x\",\"type\":\"uint192\"},{\"internalType\":\"uint192\",\"name\":\"y\",\"type\":\"uint192\"}],\"name\":\"fixMin\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"fullMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lo\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRToken\",\"name\":\"rToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"maxIssuableByAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"mulDiv256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundingMode\",\"name\":\"rounding\",\"type\":\"uint8\"}],\"name\":\"mulDiv256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"safeWrap\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"divuu(uint256,uint256)\":{\"returns\":{\"_0\":\"x / y\"}},\"fixMin(uint192,uint192)\":{\"returns\":{\"_0\":\"min(x,y)\"}},\"fullMul(uint256,uint256)\":{\"details\":\"Intended to be internal to this library\",\"returns\":{\"hi\":\"(hi, lo) satisfies  hi*(2**256) + lo == x * y\",\"lo\":\"(paired with `hi`)\"}},\"mulDiv256(uint256,uint256,uint256)\":{\"details\":\"Only use if you need to avoid overflow; costlier than x * y / z\",\"returns\":{\"result\":\"x * y / z\"}},\"mulDiv256(uint256,uint256,uint256,uint8)\":{\"details\":\"Only use if you need to avoid overflow; costlier than x * y / z\",\"returns\":{\"_0\":\"x * y / z\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"divuu(uint256,uint256)\":{\"notice\":\"Divide a uint by a uint, yielding a  uint192\"},\"fullMul(uint256,uint256)\":{\"notice\":\"Return (x*y) as a \\\"virtual uint512\\\" (lo, hi), representing (hi*2**256 + lo)   Adapted from sources:   https://medium.com/wicketh/27650fec525d, https://medium.com/coinmonks/4db014e080b1\"},\"mulDiv256(uint256,uint256,uint256,uint8)\":{\"notice\":\"Return (x*y/z), avoiding intermediate overflow.\"},\"safeWrap(uint256)\":{\"notice\":\"Explicitly convert a uint256 to a uint192. Revert if the input is out of bounds.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReserveHelpers.sol\":\"ReserveHelpers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[]},\"sources\":{\"contracts/ReserveHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nenum RoundingMode {\\n    FLOOR,\\n    ROUND,\\n    CEIL\\n}\\n\\ninterface IAssetRegistry {\\n    function refresh() external;\\n}\\n\\ninterface IBasketHandler {\\n    function quote(uint192 amount, RoundingMode rounding) external view returns (address[] memory erc20s, uint256[] memory quantities);\\n}\\n\\ninterface IMain {\\n    function assetRegistry() external view returns (IAssetRegistry);\\n    function basketHandler() external view returns (IBasketHandler);\\n    function frozen() external view returns (bool);\\n}\\n\\ninterface IRToken {\\n    function main() external view returns (IMain);\\n    function totalSupply() external view returns (uint256);\\n    function basketsNeeded() external view returns (uint256);\\n}\\n\\ncontract ReserveHelpers {\\n    uint64 constant FIX_SCALE = 1e18;\\n    uint192 constant FIX_ONE = FIX_SCALE;\\n    uint192 constant FIX_MAX = type(uint192).max;\\n\\n    error UIntOutOfBounds();\\n\\n    function maxIssuableByAmounts(IRToken rToken, uint256[] memory amounts)\\n        public\\n        returns (uint256)\\n    {\\n        IMain main = rToken.main();\\n\\n        require(!main.frozen(), \\\"frozen\\\");\\n\\n        // Poke Main\\n        main.assetRegistry().refresh();\\n\\n        // Get basket ERC20s\\n        IBasketHandler bh = main.basketHandler();\\n        (address[] memory erc20s, uint256[] memory quantities) = bh.quote(FIX_ONE, RoundingMode.CEIL);\\n\\n        // Compute how many baskets we can mint with the collateral amounts\\n        uint192 baskets = type(uint192).max;\\n        for (uint256 i = 0; i < erc20s.length; ++i) {\\n            // {BU} = {tok} / {tok/BU}\\n            uint192 inBUs = divuu(amounts[i], quantities[i]); // FLOOR\\n            baskets = fixMin(baskets, inBUs);\\n        }\\n\\n        // Convert baskets to RToken\\n        // {qRTok} = {qRTok/BU} * {qRTok} / {BU}\\n        uint256 totalSupply = rToken.totalSupply();\\n        if (totalSupply == 0) return baskets;\\n        return muluDivu(baskets, rToken.totalSupply(), rToken.basketsNeeded(), RoundingMode.FLOOR);\\n    }\\n\\n    /// Explicitly convert a uint256 to a uint192. Revert if the input is out of bounds.\\n    function safeWrap(uint256 x) public pure returns (uint192) {\\n        if (FIX_MAX < x) revert UIntOutOfBounds();\\n        return uint192(x);\\n    }\\n\\n    /// Divide a uint by a uint, yielding a  uint192\\n    /// @return x / y\\n    // as-ints: x * 1e18 / y\\n    function divuu(uint256 x, uint256 y) public pure returns (uint192) {\\n        return safeWrap(mulDiv256(FIX_SCALE, x, y));\\n    }\\n\\n    /// Compute x * y / z, avoiding intermediate overflow\\n    /// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n    /// @return x * y / z\\n    // as-ints: x * y / z\\n    function muluDivu(\\n        uint192 x,\\n        uint256 y,\\n        uint256 z,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        return safeWrap(mulDiv256(x, y, z, rounding));\\n    }\\n\\n    /// @return min(x,y)\\n    // as-ints: min(x,y)\\n    function fixMin(uint192 x, uint192 y) public pure returns (uint192) {\\n        return x < y ? x : y;\\n    }\\n\\n    /// Return (x*y/z), avoiding intermediate overflow.\\n    //  Adapted from sources:\\n    //    https://medium.com/coinmonks/4db014e080b1, https://medium.com/wicketh/afa55870a65\\n    //    and quite a few of the other excellent \\\"Mathemagic\\\" posts from https://medium.com/wicketh\\n    /// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n    /// @return result x * y / z\\n    function mulDiv256(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) public pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 hi, uint256 lo) = fullMul(x, y);\\n            if (hi >= z) revert UIntOutOfBounds();\\n            uint256 mm = mulmod(x, y, z);\\n            if (mm > lo) hi -= 1;\\n            lo -= mm;\\n            uint256 pow2 = z & (0 - z);\\n            z /= pow2;\\n            lo /= pow2;\\n            lo += hi * ((0 - pow2) / pow2 + 1);\\n            uint256 r = 1;\\n            r *= 2 - z * r;\\n            r *= 2 - z * r;\\n            r *= 2 - z * r;\\n            r *= 2 - z * r;\\n            r *= 2 - z * r;\\n            r *= 2 - z * r;\\n            r *= 2 - z * r;\\n            r *= 2 - z * r;\\n            result = lo * r;\\n        }\\n    }\\n\\n    /// Return (x*y/z), avoiding intermediate overflow.\\n    /// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n    /// @return x * y / z\\n    function mulDiv256(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z,\\n        RoundingMode rounding\\n    ) public pure returns (uint256) {\\n        uint256 result = mulDiv256(x, y, z);\\n        if (rounding == RoundingMode.FLOOR) return result;\\n\\n        uint256 mm = mulmod(x, y, z);\\n        if (rounding == RoundingMode.CEIL) {\\n            if (mm > 0) result += 1;\\n        } else {\\n            if (mm > ((z - 1) / 2)) result += 1; // z should be z-1\\n        }\\n        return result;\\n    }\\n\\n    /// Return (x*y) as a \\\"virtual uint512\\\" (lo, hi), representing (hi*2**256 + lo)\\n    ///   Adapted from sources:\\n    ///   https://medium.com/wicketh/27650fec525d, https://medium.com/coinmonks/4db014e080b1\\n    /// @dev Intended to be internal to this library\\n    /// @return hi (hi, lo) satisfies  hi*(2**256) + lo == x * y\\n    /// @return lo (paired with `hi`)\\n    function fullMul(uint256 x, uint256 y) public pure returns (uint256 hi, uint256 lo) {\\n        unchecked {\\n            uint256 mm = mulmod(x, y, uint256(0) - uint256(1));\\n            lo = x * y;\\n            hi = mm - lo;\\n            if (mm < lo) hi -= 1;\\n        }\\n    }\\n}\\n    \",\"keccak256\":\"0x453fed8483afa53689adda7802fa04c0a07d945ee4ff8b87ee9c1d4145395fc7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f89806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806367a4a3dd1161005b57806367a4a3dd146100f7578063e8067bd51461011f578063f7cd013514610132578063f86cf4591461014557600080fd5b806312d96264146100825780633ffabafe146100a85780635ef949b2146100e4575b600080fd5b6100956100903660046109cc565b610158565b6040519081526020015b60405180910390f35b6100bb6100b63660046109f8565b610254565b60405177ffffffffffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b6100956100f2366004610ad8565b6102ac565b61010a610105366004610b83565b610835565b6040805192835260208301919091520161009f565b6100bb61012d366004610b83565b610880565b6100bb610140366004610bd2565b61089f565b610095610153366004610c05565b6108e9565b60008060006101678686610835565b915091508382106101a4576040517ff44398f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084806101b4576101b4610c4a565b8688099050818111156101c8576001830392505b9081900390600085900385168086816101e3576101e3610c4a565b0495508083816101f5576101f5610c4a565b04925080816000038161020a5761020a610c4a565b046001019390930291909101600285810380870282030280870282030280870282030280870282030280870282030280870282030295860290039094029390930295945050505050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff8211156102a8576040517ff44398f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5090565b6000808373ffffffffffffffffffffffffffffffffffffffff1663dffeadd06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031e9190610c79565b90508073ffffffffffffffffffffffffffffffffffffffff1663054f7d9c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190610c96565b156103fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f66726f7a656e0000000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663979d7e866040518163ffffffff1660e01b8152600401602060405180830381865afa158015610445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104699190610c79565b73ffffffffffffffffffffffffffffffffffffffff1663f8ac93e86040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104b057600080fd5b505af11580156104c4573d6000803e3d6000fd5b5050505060008173ffffffffffffffffffffffffffffffffffffffff16632f2439b16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190610c79565b6040517fc620f0fc000000000000000000000000000000000000000000000000000000008152909150600090819073ffffffffffffffffffffffffffffffffffffffff84169063c620f0fc9061059e90670de0b6b3a764000090600290600401610ce7565b600060405180830381865afa1580156105bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106019190810190610db6565b909250905077ffffffffffffffffffffffffffffffffffffffffffffffff60005b835181101561068057600061066989838151811061064257610642610e7b565b602002602001015185848151811061065c5761065c610e7b565b6020026020010151610880565b9050610675838261089f565b925050600101610622565b5060008873ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f29190610eaa565b905080600003610723575077ffffffffffffffffffffffffffffffffffffffffffffffff16945061082f9350505050565b61080c828a73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190610eaa565b8b73ffffffffffffffffffffffffffffffffffffffff16637121c2736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108059190610eaa565b6000610998565b77ffffffffffffffffffffffffffffffffffffffffffffffff1696505050505050505b92915050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84860990508385029150818103925081811015610878576001830392505b509250929050565b60006108986100b6670de0b6b3a76400008585610158565b9392505050565b60008177ffffffffffffffffffffffffffffffffffffffffffffffff168377ffffffffffffffffffffffffffffffffffffffffffffffff16106108e25781610898565b5090919050565b6000806108f7868686610158565b9050600083600281111561090d5761090d610cb8565b03610919579050610990565b6000848061092957610929610c4a565b8688099050600284600281111561094257610942610cb8565b0361096057801561095b57610958600183610ef2565b91505b61098c565b600261096d600187610f05565b6109779190610f18565b81111561098c57610989600183610ef2565b91505b5090505b949350505050565b60006109c36100b68677ffffffffffffffffffffffffffffffffffffffffffffffff168686866108e9565b95945050505050565b6000806000606084860312156109e157600080fd5b505081359360208301359350604090920135919050565b600060208284031215610a0a57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610a3357600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610aac57610aac610a36565b604052919050565b600067ffffffffffffffff821115610ace57610ace610a36565b5060051b60200190565b60008060408385031215610aeb57600080fd5b8235610af681610a11565b915060208381013567ffffffffffffffff811115610b1357600080fd5b8401601f81018613610b2457600080fd5b8035610b37610b3282610ab4565b610a65565b81815260059190911b82018301908381019088831115610b5657600080fd5b928401925b82841015610b7457833582529284019290840190610b5b565b80955050505050509250929050565b60008060408385031215610b9657600080fd5b50508035926020909101359150565b803577ffffffffffffffffffffffffffffffffffffffffffffffff81168114610bcd57600080fd5b919050565b60008060408385031215610be557600080fd5b610bee83610ba5565b9150610bfc60208401610ba5565b90509250929050565b60008060008060808587031215610c1b57600080fd5b843593506020850135925060408501359150606085013560038110610c3f57600080fd5b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600060208284031215610c8b57600080fd5b815161089881610a11565b600060208284031215610ca857600080fd5b8151801515811461089857600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b77ffffffffffffffffffffffffffffffffffffffffffffffff831681526040810160038310610d3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260208301529392505050565b600082601f830112610d5d57600080fd5b81516020610d6d610b3283610ab4565b8083825260208201915060208460051b870101935086841115610d8f57600080fd5b602086015b84811015610dab5780518352918301918301610d94565b509695505050505050565b60008060408385031215610dc957600080fd5b825167ffffffffffffffff80821115610de157600080fd5b818501915085601f830112610df557600080fd5b81516020610e05610b3283610ab4565b82815260059290921b84018101918181019089841115610e2457600080fd5b948201945b83861015610e4b578551610e3c81610a11565b82529482019490820190610e29565b91880151919650909350505080821115610e6457600080fd5b50610e7185828601610d4c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610ebc57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561082f5761082f610ec3565b8181038181111561082f5761082f610ec3565b600082610f4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212204c195f1d172a73eb28c211d4f2452e6e98bad16663b58a7cd3b4cd70fe16946764736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806367a4a3dd1161005b57806367a4a3dd146100f7578063e8067bd51461011f578063f7cd013514610132578063f86cf4591461014557600080fd5b806312d96264146100825780633ffabafe146100a85780635ef949b2146100e4575b600080fd5b6100956100903660046109cc565b610158565b6040519081526020015b60405180910390f35b6100bb6100b63660046109f8565b610254565b60405177ffffffffffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b6100956100f2366004610ad8565b6102ac565b61010a610105366004610b83565b610835565b6040805192835260208301919091520161009f565b6100bb61012d366004610b83565b610880565b6100bb610140366004610bd2565b61089f565b610095610153366004610c05565b6108e9565b60008060006101678686610835565b915091508382106101a4576040517ff44398f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084806101b4576101b4610c4a565b8688099050818111156101c8576001830392505b9081900390600085900385168086816101e3576101e3610c4a565b0495508083816101f5576101f5610c4a565b04925080816000038161020a5761020a610c4a565b046001019390930291909101600285810380870282030280870282030280870282030280870282030280870282030280870282030295860290039094029390930295945050505050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff8211156102a8576040517ff44398f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5090565b6000808373ffffffffffffffffffffffffffffffffffffffff1663dffeadd06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031e9190610c79565b90508073ffffffffffffffffffffffffffffffffffffffff1663054f7d9c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190610c96565b156103fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f66726f7a656e0000000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663979d7e866040518163ffffffff1660e01b8152600401602060405180830381865afa158015610445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104699190610c79565b73ffffffffffffffffffffffffffffffffffffffff1663f8ac93e86040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156104b057600080fd5b505af11580156104c4573d6000803e3d6000fd5b5050505060008173ffffffffffffffffffffffffffffffffffffffff16632f2439b16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190610c79565b6040517fc620f0fc000000000000000000000000000000000000000000000000000000008152909150600090819073ffffffffffffffffffffffffffffffffffffffff84169063c620f0fc9061059e90670de0b6b3a764000090600290600401610ce7565b600060405180830381865afa1580156105bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106019190810190610db6565b909250905077ffffffffffffffffffffffffffffffffffffffffffffffff60005b835181101561068057600061066989838151811061064257610642610e7b565b602002602001015185848151811061065c5761065c610e7b565b6020026020010151610880565b9050610675838261089f565b925050600101610622565b5060008873ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f29190610eaa565b905080600003610723575077ffffffffffffffffffffffffffffffffffffffffffffffff16945061082f9350505050565b61080c828a73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190610eaa565b8b73ffffffffffffffffffffffffffffffffffffffff16637121c2736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108059190610eaa565b6000610998565b77ffffffffffffffffffffffffffffffffffffffffffffffff1696505050505050505b92915050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84860990508385029150818103925081811015610878576001830392505b509250929050565b60006108986100b6670de0b6b3a76400008585610158565b9392505050565b60008177ffffffffffffffffffffffffffffffffffffffffffffffff168377ffffffffffffffffffffffffffffffffffffffffffffffff16106108e25781610898565b5090919050565b6000806108f7868686610158565b9050600083600281111561090d5761090d610cb8565b03610919579050610990565b6000848061092957610929610c4a565b8688099050600284600281111561094257610942610cb8565b0361096057801561095b57610958600183610ef2565b91505b61098c565b600261096d600187610f05565b6109779190610f18565b81111561098c57610989600183610ef2565b91505b5090505b949350505050565b60006109c36100b68677ffffffffffffffffffffffffffffffffffffffffffffffff168686866108e9565b95945050505050565b6000806000606084860312156109e157600080fd5b505081359360208301359350604090920135919050565b600060208284031215610a0a57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610a3357600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610aac57610aac610a36565b604052919050565b600067ffffffffffffffff821115610ace57610ace610a36565b5060051b60200190565b60008060408385031215610aeb57600080fd5b8235610af681610a11565b915060208381013567ffffffffffffffff811115610b1357600080fd5b8401601f81018613610b2457600080fd5b8035610b37610b3282610ab4565b610a65565b81815260059190911b82018301908381019088831115610b5657600080fd5b928401925b82841015610b7457833582529284019290840190610b5b565b80955050505050509250929050565b60008060408385031215610b9657600080fd5b50508035926020909101359150565b803577ffffffffffffffffffffffffffffffffffffffffffffffff81168114610bcd57600080fd5b919050565b60008060408385031215610be557600080fd5b610bee83610ba5565b9150610bfc60208401610ba5565b90509250929050565b60008060008060808587031215610c1b57600080fd5b843593506020850135925060408501359150606085013560038110610c3f57600080fd5b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600060208284031215610c8b57600080fd5b815161089881610a11565b600060208284031215610ca857600080fd5b8151801515811461089857600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b77ffffffffffffffffffffffffffffffffffffffffffffffff831681526040810160038310610d3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260208301529392505050565b600082601f830112610d5d57600080fd5b81516020610d6d610b3283610ab4565b8083825260208201915060208460051b870101935086841115610d8f57600080fd5b602086015b84811015610dab5780518352918301918301610d94565b509695505050505050565b60008060408385031215610dc957600080fd5b825167ffffffffffffffff80821115610de157600080fd5b818501915085601f830112610df557600080fd5b81516020610e05610b3283610ab4565b82815260059290921b84018101918181019089841115610e2457600080fd5b948201945b83861015610e4b578551610e3c81610a11565b82529482019490820190610e29565b91880151919650909350505080821115610e6457600080fd5b50610e7185828601610d4c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610ebc57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561082f5761082f610ec3565b8181038181111561082f5761082f610ec3565b600082610f4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212204c195f1d172a73eb28c211d4f2452e6e98bad16663b58a7cd3b4cd70fe16946764736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "divuu(uint256,uint256)": {
        "returns": {
          "_0": "x / y"
        }
      },
      "fixMin(uint192,uint192)": {
        "returns": {
          "_0": "min(x,y)"
        }
      },
      "fullMul(uint256,uint256)": {
        "details": "Intended to be internal to this library",
        "returns": {
          "hi": "(hi, lo) satisfies  hi*(2**256) + lo == x * y",
          "lo": "(paired with `hi`)"
        }
      },
      "mulDiv256(uint256,uint256,uint256)": {
        "details": "Only use if you need to avoid overflow; costlier than x * y / z",
        "returns": {
          "result": "x * y / z"
        }
      },
      "mulDiv256(uint256,uint256,uint256,uint8)": {
        "details": "Only use if you need to avoid overflow; costlier than x * y / z",
        "returns": {
          "_0": "x * y / z"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "divuu(uint256,uint256)": {
        "notice": "Divide a uint by a uint, yielding a  uint192"
      },
      "fullMul(uint256,uint256)": {
        "notice": "Return (x*y) as a \"virtual uint512\" (lo, hi), representing (hi*2**256 + lo)   Adapted from sources:   https://medium.com/wicketh/27650fec525d, https://medium.com/coinmonks/4db014e080b1"
      },
      "mulDiv256(uint256,uint256,uint256,uint8)": {
        "notice": "Return (x*y/z), avoiding intermediate overflow."
      },
      "safeWrap(uint256)": {
        "notice": "Explicitly convert a uint256 to a uint192. Revert if the input is out of bounds."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}