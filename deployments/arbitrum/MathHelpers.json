{
  "address": "0xC9e817C177D481DaC9d071CA201B88B789eDAC22",
  "abi": [
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "average",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "condition",
          "type": "bool"
        },
        {
          "internalType": "bytes4",
          "name": "method",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "conditional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "div",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "max",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "min",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "mod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "mul",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "sub",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x505c99d4c306b2adcdbe5e6aa1c4c9e3cfe4c2914a4c4f6603f25b034842e024",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf754916D90B109AE8E405FD34064cF6Df23947eb",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1298525",
    "logsBloom": "0x
    "blockHash": "0xe0cacdc33c19507c5e3f1982016ae145f955610465b694466b6e722f00fe400c",
    "transactionHash": "0x505c99d4c306b2adcdbe5e6aa1c4c9e3cfe4c2914a4c4f6603f25b034842e024",
    "logs": [],
    "blockNumber": 38506591,
    "cumulativeGasUsed": "1298525",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "57e8446a1a1beec4cd2f90e168165735",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"average\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"condition\",\"type\":\"bool\"},{\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"conditional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"div\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"sub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"MathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet Based on OpenZepplin Contracts v4.7.3: - utils/math/Math.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol) - utils/math/SafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol)\",\"kind\":\"dev\",\"methods\":{\"add(uint256,uint256)\":{\"details\":\"Returns the addition of two unsigned integers, reverting on overflow. Counterpart to Solidity's `+` operator. Requirements: - Addition cannot overflow.\"},\"average(uint256,uint256)\":{\"details\":\"Returns the average of two numbers. The result is rounded towards zero.\"},\"conditional(bool,bytes4,uint256,uint256)\":{\"details\":\"Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification.\"},\"div(uint256,uint256)\":{\"details\":\"Returns the integer division of two unsigned integers, reverting on division by zero. The result is rounded towards zero. Counterpart to Solidity's `/` operator. Requirements: - The divisor cannot be zero.\"},\"max(uint256,uint256)\":{\"details\":\"Returns the largest of two numbers.\"},\"min(uint256,uint256)\":{\"details\":\"Returns the smallest of two numbers.\"},\"mod(uint256,uint256)\":{\"details\":\"Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), reverting when dividing by zero. Counterpart to Solidity's `%` operator. This function uses a `revert` opcode (which leaves remaining gas untouched) while Solidity uses an invalid opcode to revert (consuming all remaining gas). Requirements: - The divisor cannot be zero.\"},\"mul(uint256,uint256)\":{\"details\":\"Returns the multiplication of two unsigned integers, reverting on overflow. Counterpart to Solidity's `*` operator. Requirements: - Multiplication cannot overflow.\"},\"sub(uint256,uint256)\":{\"details\":\"Returns the subtraction of two unsigned integers, reverting on overflow (when the result is negative). Counterpart to Solidity's `-` operator. Requirements: - Subtraction cannot overflow.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/MathHelpers.sol\":\"MathHelpers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/helpers/MathHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @dev MathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet\\n *\\n * Based on OpenZepplin Contracts v4.7.3:\\n * - utils/math/Math.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol)\\n * - utils/math/SafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol)\\n */\\ncontract MathHelpers {\\n    uint256 public constant VERSION = 1;\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) external pure returns (uint256) {\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification.\\n     */\\n    function conditional(bool condition, bytes4 method, uint256 a, uint256 b) external view returns (uint256) {\\n        if (condition) {\\n            (bool success, bytes memory n) = address(this).staticcall(abi.encodeWithSelector(method, a, b));\\n            if (success) return abi.decode(n, (uint256));\\n        }\\n        return a;\\n    }\\n}\\n\",\"keccak256\":\"0x1e8f95e33e7030141801f035376a784a59e6821a43bf8d218cd74f91d9ecc705\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761052d908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c9081632b7423ab146103065781636d5433e6146102e1578163771602f7146102c55781637ae2b5c714610296578163a391c15b14610271578163b67d77c514610221578163c8a4ac9c146101a9578163cf698e3d1461011e578163f43f523a146100cd575063ffa1ad741461009157600080fd5b346100c957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c9576020905160018152f35b5080fd5b8383346100c9576100dd36610329565b91909282156100f25750602093505191068152f35b806012867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b9050346101a55760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a5573580151581036101a557602435927fffffffff00000000000000000000000000000000000000000000000000000000841684036101a2575060209261019b91606435916044359161039e565b9051908152f35b80fd5b8280fd5b8383346100c9576101b936610329565b919092837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311841515166101f55750602093505191028152f35b806011867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b8383346100c95761023136610329565b810392908311610245576020838351908152f35b806011857f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b8383346100c95761028136610329565b91909282156100f25750602093505191048152f35b5050346100c9576020916102a936610329565b909150808210156102bd5750905b51908152f35b9050906102b7565b5050346100c95760209061019b6102db36610329565b90610362565b5050346100c9576020916102f436610329565b9091508082106102bd57509051908152f35b5050346100c95760209061019b61031c36610329565b80821860011c9116610362565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc604091011261035d576004359060243590565b600080fd5b9190820180921161036f57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291926103aa57505090565b6040519160208301918252836024840152604483015260448252608082019167ffffffffffffffff92818110848211176104c8576040526000809281925190305afa3d156104bf573d83811161049257604051937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f81601f8501160116850190858210908211176104655760405283523d82602085013e5b61044d57505090565b9091506020828051810103126101a257506020015190565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b60609250610444565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220f3b0f8a360d371d9d00d06a4cd5f97deabb468f28b07e7ea24636cfe533a02e464736f6c63430008100033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c9081632b7423ab146103065781636d5433e6146102e1578163771602f7146102c55781637ae2b5c714610296578163a391c15b14610271578163b67d77c514610221578163c8a4ac9c146101a9578163cf698e3d1461011e578163f43f523a146100cd575063ffa1ad741461009157600080fd5b346100c957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c9576020905160018152f35b5080fd5b8383346100c9576100dd36610329565b91909282156100f25750602093505191068152f35b806012867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b9050346101a55760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a5573580151581036101a557602435927fffffffff00000000000000000000000000000000000000000000000000000000841684036101a2575060209261019b91606435916044359161039e565b9051908152f35b80fd5b8280fd5b8383346100c9576101b936610329565b919092837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311841515166101f55750602093505191028152f35b806011867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b8383346100c95761023136610329565b810392908311610245576020838351908152f35b806011857f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b8383346100c95761028136610329565b91909282156100f25750602093505191048152f35b5050346100c9576020916102a936610329565b909150808210156102bd5750905b51908152f35b9050906102b7565b5050346100c95760209061019b6102db36610329565b90610362565b5050346100c9576020916102f436610329565b9091508082106102bd57509051908152f35b5050346100c95760209061019b61031c36610329565b80821860011c9116610362565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc604091011261035d576004359060243590565b600080fd5b9190820180921161036f57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291926103aa57505090565b6040519160208301918252836024840152604483015260448252608082019167ffffffffffffffff92818110848211176104c8576040526000809281925190305afa3d156104bf573d83811161049257604051937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f81601f8501160116850190858210908211176104655760405283523d82602085013e5b61044d57505090565b9091506020828051810103126101a257506020015190565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b60609250610444565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220f3b0f8a360d371d9d00d06a4cd5f97deabb468f28b07e7ea24636cfe533a02e464736f6c63430008100033",
  "devdoc": {
    "details": "MathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet Based on OpenZepplin Contracts v4.7.3: - utils/math/Math.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol) - utils/math/SafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol)",
    "kind": "dev",
    "methods": {
      "add(uint256,uint256)": {
        "details": "Returns the addition of two unsigned integers, reverting on overflow. Counterpart to Solidity's `+` operator. Requirements: - Addition cannot overflow."
      },
      "average(uint256,uint256)": {
        "details": "Returns the average of two numbers. The result is rounded towards zero."
      },
      "conditional(bool,bytes4,uint256,uint256)": {
        "details": "Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification."
      },
      "div(uint256,uint256)": {
        "details": "Returns the integer division of two unsigned integers, reverting on division by zero. The result is rounded towards zero. Counterpart to Solidity's `/` operator. Requirements: - The divisor cannot be zero."
      },
      "max(uint256,uint256)": {
        "details": "Returns the largest of two numbers."
      },
      "min(uint256,uint256)": {
        "details": "Returns the smallest of two numbers."
      },
      "mod(uint256,uint256)": {
        "details": "Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), reverting when dividing by zero. Counterpart to Solidity's `%` operator. This function uses a `revert` opcode (which leaves remaining gas untouched) while Solidity uses an invalid opcode to revert (consuming all remaining gas). Requirements: - The divisor cannot be zero."
      },
      "mul(uint256,uint256)": {
        "details": "Returns the multiplication of two unsigned integers, reverting on overflow. Counterpart to Solidity's `*` operator. Requirements: - Multiplication cannot overflow."
      },
      "sub(uint256,uint256)": {
        "details": "Returns the subtraction of two unsigned integers, reverting on overflow (when the result is negative). Counterpart to Solidity's `-` operator. Requirements: - Subtraction cannot overflow."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}