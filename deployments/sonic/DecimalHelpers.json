{
  "address": "0x1c34F3eB4E9e71D92D1D48392a1B12005e0b96bB",
  "abi": [
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isPercent",
          "type": "bool"
        }
      ],
      "name": "decimalString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e5ca481a5c90564e7ab5adf35d6c6155d029684b1e96ab903145c3da31ecc4e",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x826e0BB2276271eFdF2a500597f37b94f6c153bA",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "615488",
    "logsBloom": "0x
    "blockHash": "0x4a7e06663a960c46d9115bef3ed266c6cf0dd6be898d1b3373cca9d2b11e724c",
    "transactionHash": "0x3e5ca481a5c90564e7ab5adf35d6c6155d029684b1e96ab903145c3da31ecc4e",
    "logs": [],
    "blockNumber": 7755784,
    "cumulativeGasUsed": "615488",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7f6597ab7f5db378b0f1ee7741fc2dcf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPercent\",\"type\":\"bool\"}],\"name\":\"decimalString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DecimalHelpers.sol\":\"DecimalHelpers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[]},\"sources\":{\"contracts/DecimalHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n\\ncontract DecimalHelpers {\\n    uint256 public constant VERSION = 1;\\n\\n    function decimalString(uint256 number, uint8 decimals, bool isPercent) public pure returns(string memory){\\n        if(number == 0){\\n            return isPercent ? \\\"0%\\\" : \\\"0\\\";\\n        }\\n        \\n        uint8 percentBufferOffset = isPercent ? 1 : 0;\\n        uint256 tenPowDecimals = 10 ** decimals;\\n\\n        uint256 temp = number;\\n        uint8 digits;\\n        uint8 numSigfigs;\\n        while (temp != 0) {\\n            if (numSigfigs > 0) {\\n                // count all digits preceding least significant figure\\n                numSigfigs++;\\n            } else if (temp % 10 != 0) {\\n                numSigfigs++;\\n            }\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        DecimalStringParams memory params;\\n        params.isPercent = isPercent;\\n        if((digits - numSigfigs) >= decimals) {\\n            // no decimals, ensure we preserve all trailing zeros\\n            params.sigfigs = number / tenPowDecimals;\\n            params.sigfigIndex = digits - decimals;\\n            params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n        } else {\\n            // chop all trailing zeros for numbers with decimals\\n            params.sigfigs = number / (10 ** (digits - numSigfigs));\\n            if(tenPowDecimals > number){\\n                // number is less than one\\n                // in this case, there may be leading zeros after the decimal place \\n                // that need to be added\\n\\n                // offset leading zeros by two to account for leading '0.'\\n                params.zerosStartIndex = 2;\\n                params.zerosEndIndex = decimals - digits + 2;\\n                params.sigfigIndex = numSigfigs + params.zerosEndIndex;\\n                params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n                params.isLessThanOne = true;\\n            } else {\\n                // In this case, there are digits before and\\n                // after the decimal place\\n                params.sigfigIndex = numSigfigs + 1;\\n                params.decimalIndex = digits - decimals + 1;\\n            }\\n        }\\n        params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n        return generateDecimalString(params);\\n    }\\n\\n    // With modifications, From https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/NFTDescriptor.sol#L189-L231\\n\\n    struct DecimalStringParams {\\n        // significant figures of decimal\\n        uint256 sigfigs;\\n        // length of decimal string\\n        uint8 bufferLength;\\n        // ending index for significant figures (funtion works backwards when copying sigfigs)\\n        uint8 sigfigIndex;\\n        // index of decimal place (0 if no decimal)\\n        uint8 decimalIndex;\\n        // start index for trailing/leading 0's for very small/large numbers\\n        uint8 zerosStartIndex;\\n        // end index for trailing/leading 0's for very small/large numbers\\n        uint8 zerosEndIndex;\\n        // true if decimal number is less than one\\n        bool isLessThanOne;\\n        // true if string should include \\\"%\\\"\\n        bool isPercent;\\n    }\\n\\n    function generateDecimalString(DecimalStringParams memory params) private pure returns (string memory) {\\n        bytes memory buffer = new bytes(params.bufferLength);\\n        if (params.isPercent) {\\n            buffer[buffer.length - 1] = '%';\\n        }\\n        if (params.isLessThanOne) {\\n            buffer[0] = '0';\\n            buffer[1] = '.';\\n        }\\n\\n        // add leading/trailing 0's\\n        for (uint256 zerosCursor = params.zerosStartIndex; zerosCursor < params.zerosEndIndex; zerosCursor++) {\\n            buffer[zerosCursor] = bytes1(uint8(48));\\n        }\\n        // add sigfigs\\n        while (params.sigfigs > 0) {\\n            if (params.decimalIndex > 0 && params.sigfigIndex == params.decimalIndex) {\\n                buffer[--params.sigfigIndex] = '.';\\n            }\\n            buffer[--params.sigfigIndex] = bytes1(uint8(uint256(48) + (params.sigfigs % 10)));\\n            params.sigfigs /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\",\"keccak256\":\"0x382b47f21dc79f7542c1dbd62f3c0146c14d1d5a8f4efd196581b59292b45d17\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a31806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631523fbcc1461003b578063ffa1ad7414610064575b600080fd5b61004e610049366004610645565b61007a565b60405161005b9190610692565b60405180910390f35b61006c600181565b60405190815260200161005b565b60608360000361010257816100c4576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152506100fb565b6040518060400160405280600281526020017f30250000000000000000000000000000000000000000000000000000000000008152505b90506102f5565b600082610110576000610113565b60015b9050600061012285600a61084d565b9050856000805b82156101885760ff81161561014a57806101428161085c565b915050610168565b610155600a846108aa565b1561016857806101648161085c565b9150505b816101728161085c565b92506101819050600a846108be565b9250610129565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915287151560e082015260ff89166101d883856108d2565b60ff1610610218576101ea858b6108be565b81526101f689846108d2565b60ff166040820181905261020b9087906108eb565b60ff1660208201526102cb565b61022282846108d2565b61022d90600a61084d565b610237908b6108be565b81528985111561029a5760026080820152610252838a6108d2565b61025d9060026108eb565b60ff1660a0820181905261027190836108eb565b60ff16604082018190526102869087906108eb565b60ff166020820152600160c08201526102cb565b6102a58260016108eb565b60ff1660408201526102b789846108d2565b6102c29060016108eb565b60ff1660608201525b8581604001516102db91906108eb565b60ff1660208201526102ec816102fc565b96505050505050505b9392505050565b60606000826020015160ff1667ffffffffffffffff81111561032057610320610904565b6040519080825280601f01601f19166020018201604052801561034a576020820181803683370190505b5090508260e00151156103c7577f250000000000000000000000000000000000000000000000000000000000000081600183516103879190610933565b8151811061039757610397610946565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8260c0015115610498577f30000000000000000000000000000000000000000000000000000000000000008160008151811061040557610405610946565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f2e000000000000000000000000000000000000000000000000000000000000008160018151811061046857610468610946565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b608083015160ff165b8360a0015160ff1681101561050857603060f81b8282815181106104c7576104c7610946565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061050081610975565b9150506104a1565b505b82511561063f576000836060015160ff161180156105355750826060015160ff16836040015160ff16145b156105b2577f2e000000000000000000000000000000000000000000000000000000000000008184604001805161056b906109ad565b60ff16908190528151811061058257610582610946565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b82516105c090600a906108aa565b6105cb9060306109e8565b60f81b818460400180516105de906109ad565b60ff1690819052815181106105f5576105f5610946565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8360000181815161063791906108be565b90525061050a565b92915050565b60008060006060848603121561065a57600080fd5b83359250602084013560ff8116811461067257600080fd5b91506040840135801515811461068757600080fd5b809150509250925092565b600060208083528351808285015260005b818110156106bf578581018301518582016040015282016106a3565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b8085111561078657817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561076c5761076c6106fe565b8085161561077957918102915b93841c9390800290610732565b509250929050565b60008261079d5750600161063f565b816107aa5750600061063f565b81600181146107c057600281146107ca576107e6565b600191505061063f565b60ff8411156107db576107db6106fe565b50506001821b61063f565b5060208310610133831016604e8410600b8410161715610809575081810a61063f565b610813838361072d565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610845576108456106fe565b029392505050565b60006102f560ff84168361078e565b600060ff821660ff8103610872576108726106fe565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826108b9576108b961087b565b500690565b6000826108cd576108cd61087b565b500490565b60ff828116828216039081111561063f5761063f6106fe565b60ff818116838216019081111561063f5761063f6106fe565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8181038181111561063f5761063f6106fe565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109a6576109a66106fe565b5060010190565b600060ff8216806109c0576109c06106fe565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b8082018082111561063f5761063f6106fe56fea26469706673582212201ce6740b220bb59d4ee1011e60a433b16c28204e3c15375f5fc1c65a0e17b36e64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80631523fbcc1461003b578063ffa1ad7414610064575b600080fd5b61004e610049366004610645565b61007a565b60405161005b9190610692565b60405180910390f35b61006c600181565b60405190815260200161005b565b60608360000361010257816100c4576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152506100fb565b6040518060400160405280600281526020017f30250000000000000000000000000000000000000000000000000000000000008152505b90506102f5565b600082610110576000610113565b60015b9050600061012285600a61084d565b9050856000805b82156101885760ff81161561014a57806101428161085c565b915050610168565b610155600a846108aa565b1561016857806101648161085c565b9150505b816101728161085c565b92506101819050600a846108be565b9250610129565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915287151560e082015260ff89166101d883856108d2565b60ff1610610218576101ea858b6108be565b81526101f689846108d2565b60ff166040820181905261020b9087906108eb565b60ff1660208201526102cb565b61022282846108d2565b61022d90600a61084d565b610237908b6108be565b81528985111561029a5760026080820152610252838a6108d2565b61025d9060026108eb565b60ff1660a0820181905261027190836108eb565b60ff16604082018190526102869087906108eb565b60ff166020820152600160c08201526102cb565b6102a58260016108eb565b60ff1660408201526102b789846108d2565b6102c29060016108eb565b60ff1660608201525b8581604001516102db91906108eb565b60ff1660208201526102ec816102fc565b96505050505050505b9392505050565b60606000826020015160ff1667ffffffffffffffff81111561032057610320610904565b6040519080825280601f01601f19166020018201604052801561034a576020820181803683370190505b5090508260e00151156103c7577f250000000000000000000000000000000000000000000000000000000000000081600183516103879190610933565b8151811061039757610397610946565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8260c0015115610498577f30000000000000000000000000000000000000000000000000000000000000008160008151811061040557610405610946565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f2e000000000000000000000000000000000000000000000000000000000000008160018151811061046857610468610946565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b608083015160ff165b8360a0015160ff1681101561050857603060f81b8282815181106104c7576104c7610946565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061050081610975565b9150506104a1565b505b82511561063f576000836060015160ff161180156105355750826060015160ff16836040015160ff16145b156105b2577f2e000000000000000000000000000000000000000000000000000000000000008184604001805161056b906109ad565b60ff16908190528151811061058257610582610946565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b82516105c090600a906108aa565b6105cb9060306109e8565b60f81b818460400180516105de906109ad565b60ff1690819052815181106105f5576105f5610946565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8360000181815161063791906108be565b90525061050a565b92915050565b60008060006060848603121561065a57600080fd5b83359250602084013560ff8116811461067257600080fd5b91506040840135801515811461068757600080fd5b809150509250925092565b600060208083528351808285015260005b818110156106bf578581018301518582016040015282016106a3565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b8085111561078657817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561076c5761076c6106fe565b8085161561077957918102915b93841c9390800290610732565b509250929050565b60008261079d5750600161063f565b816107aa5750600061063f565b81600181146107c057600281146107ca576107e6565b600191505061063f565b60ff8411156107db576107db6106fe565b50506001821b61063f565b5060208310610133831016604e8410600b8410161715610809575081810a61063f565b610813838361072d565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610845576108456106fe565b029392505050565b60006102f560ff84168361078e565b600060ff821660ff8103610872576108726106fe565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826108b9576108b961087b565b500690565b6000826108cd576108cd61087b565b500490565b60ff828116828216039081111561063f5761063f6106fe565b60ff818116838216019081111561063f5761063f6106fe565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8181038181111561063f5761063f6106fe565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109a6576109a66106fe565b5060010190565b600060ff8216806109c0576109c06106fe565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b8082018082111561063f5761063f6106fe56fea26469706673582212201ce6740b220bb59d4ee1011e60a433b16c28204e3c15375f5fc1c65a0e17b36e64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}